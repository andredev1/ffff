{"ast":null,"code":"var _jsxFileName = \"/home/andre/Documents/f/f/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Dashboard from \"./components/Dashboard\";\nimport { formatData } from \"./utils\";\nimport \"./styles.css\";\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport { macd, sma } from \"technicalindicators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [currencies, setcurrencies] = useState([]);\n  const [pair, setpair] = useState(\"\");\n  const [price, setprice] = useState(\"0.00\"); //var [priceSMA, setpriceSMA] = useState(\"\");\n\n  const [priceOBV, setpriceOBV] = useState({});\n  const [pastData, setpastData] = useState({});\n  const [csvdata, setcsvdata] = useState({});\n  const ws = useRef(null);\n  var printarray = [];\n  var ssma = useState([]);\n  var macdarray = [];\n  const [macdarray2, setmacd2] = useState({});\n  let first = useRef(false);\n  const url = \"https://api.pro.coinbase.com\";\n  useEffect(() => {\n    ws.current = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n    let pairs = [];\n\n    const apiCall = async () => {\n      await fetch(url + \"/products\").then(res => res.json()).then(data => pairs = data);\n      let filtered = pairs.filter(pair => {\n        if (pair.quote_currency === \"USD\") {\n          return pair;\n        }\n      });\n      filtered = filtered.sort((a, b) => {\n        if (a.base_currency < b.base_currency) {\n          return -1;\n        }\n\n        if (a.base_currency > b.base_currency) {\n          return 1;\n        }\n\n        return 0;\n      });\n      setcurrencies(filtered);\n      first.current = true;\n    };\n\n    apiCall();\n  }, []);\n  useEffect(() => {\n    if (!first.current) {\n      return;\n    }\n\n    let msg = {\n      type: \"subscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let jsonMsg = JSON.stringify(msg);\n    ws.current.send(jsonMsg);\n    let historicalDataURL = `${url}/products/${pair}/candles?granularity=86400`;\n\n    const fetchHistoricalData = async () => {\n      let dataArr = [];\n      await fetch(historicalDataURL).then(res => res.json()).then(data => dataArr = data);\n      let formattedData = formatData(dataArr);\n      setpastData(formattedData); // setpriceSMA(sma(pastData))\n      // setpriceOBV(macd(pastData))\n\n      setcsvdata(dataArr);\n      let col2 = [];\n\n      for (let i = 0; i < dataArr.length; i++) {\n        let val = dataArr[i][2];\n        col2.push(val);\n      }\n\n      var MACD = require('technicalindicators').MACD;\n\n      var macdInput = {\n        values: col2,\n        fastPeriod: 12,\n        slowPeriod: 26,\n        signalPeriod: 9,\n        SimpleMAOscillator: false,\n        SimpleMASignal: false\n      };\n      macdarray = MACD.calculate(macdInput);\n\n      for (let i = 0; i < macdarray.length; i++) {\n        let date = new Date(dataArr[i][0] * 1000);\n        let hour = date.getHours();\n        let minute = date.getMinutes();\n        let second = date.getSeconds();\n        let milliseconds = date.getMilliseconds();\n        let day = date.getDate();\n        let month = date.getMonth() + 1;\n        let year = date.getFullYear();\n        let final = `${hour}:${minute}:${second}:${milliseconds}__${day}-${month}-${year}`;\n        macdarray[i][\"date\"] = final;\n        macdarray[i][\"closing\"] = dataArr[i][2];\n      }\n\n      console.log(\"done\");\n      setmacd2(macdarray);\n    };\n\n    fetchHistoricalData();\n\n    ws.current.onmessage = e => {\n      let data = JSON.parse(e.data);\n\n      if (data.type !== \"ticker\") {\n        return;\n      }\n\n      if (data.product_id === pair) {\n        setprice(data.price);\n      }\n    };\n  }, [pair]);\n\n  const handleSelect = e => {\n    let unsubMsg = {\n      type: \"unsubscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let unsub = JSON.stringify(unsubMsg);\n    ws.current.send(unsub);\n    setpair(e.target.value);\n  };\n\n  let csv = [];\n\n  if (Object.keys(macdarray2).length > 0) {\n    csv.push( /*#__PURE__*/_jsxDEV(CSVLink, {\n      data: macdarray2,\n      children: \"Download CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 14\n    }, this));\n  }\n  /**\n   * Created by AAravindan on 5/4/16.\n   */\n\n\n  var HeikinAshi = require('../../lib/chart_types/HeikinAshi').HeikinAshi;\n\n  var assert = require('assert');\n\n  var data = {\n    open: [58.67, 57.46, 56.37, 55.98, 54.79, 52.21, 51.31, 51.82, 51.58],\n    high: [58.82, 57.72, 56.88, 56.09, 55.03, 53.12, 53.08, 50.04, 53.69],\n    low: [57.03, 56.21, 55.35, 54.17, 52.32, 50.59, 49.93, 50.80, 51.34],\n    close: [57.73, 56.27, 56.81, 54.17, 53.83, 50.59, 53.03, 50.86, 53.10]\n  };\n  let expectedOutput = {\n    \"close\": [58.0625, 56.915, 56.3525, 55.102500000000006, 53.9925, 51.627500000000005, 51.837500000000006, 50.879999999999995, 52.4275],\n    \"high\": [58.82, 58.13125, 57.523125, 56.9378125, 56.02015625, 55.006328124999996, 53.316914062500004, 52.577207031250005, 53.69],\n    \"low\": [57.03, 56.21, 55.35, 54.17, 52.32, 50.59, 49.93, 50.8, 51.34],\n    \"open\": [58.2, 58.13125, 57.523125, 56.9378125, 56.02015625, 55.006328124999996, 53.316914062500004, 52.577207031250005, 51.728603515625],\n    \"timestamp\": [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    \"volume\": [0, 0, 0, 0, 0, 0, 0, 0, 0]\n  };\n  describe('HeikinAshi (Calculate Heikin ashi bars)', function () {\n    let input = {};\n    beforeEach(function () {\n      input = JSON.parse(JSON.stringify(data));\n    });\n    it('should calculate HeikinAshi using the calculate method', function () {\n      assert.deepEqual(HeikinAshi.calculate(input), expectedOutput, 'Wrong Results');\n    });\n    it('should be able to get HeikinAshi for the next bar using nextValue', function () {\n      input.values = [];\n      var heikinAshi = new HeikinAshi(input);\n      var result = heikinAshi.nextValue({\n        open: 53.42,\n        high: 53.90,\n        low: 52.88,\n        close: 53.57\n      });\n      assert.deepEqual(result, {\n        timestamp: 0,\n        volume: 0,\n        open: 52.0780517578125,\n        high: 53.90,\n        low: 52.0780517578125,\n        close: 53.4425\n      }, 'Wrong Results');\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"currency\",\n      value: pair,\n      onChange: handleSelect,\n      children: currencies.map((cur, idx) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: cur.id,\n          children: cur.display_name\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }, this), csv, /*#__PURE__*/_jsxDEV(Dashboard, {\n      price: price,\n      data: pastData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this), printarray, /*#__PURE__*/_jsxDEV(Dashboard, {\n      price: price,\n      data: pastData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), \"obv macd crossing slippage indicators\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"iOz57uzV1+Iqn+V96ZExTknF+R8=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/andre/Documents/f/f/src/App.js"],"names":["React","useState","useEffect","useRef","Dashboard","formatData","CSVLink","CSVDownload","macd","sma","App","currencies","setcurrencies","pair","setpair","price","setprice","priceOBV","setpriceOBV","pastData","setpastData","csvdata","setcsvdata","ws","printarray","ssma","macdarray","macdarray2","setmacd2","first","url","current","WebSocket","pairs","apiCall","fetch","then","res","json","data","filtered","filter","quote_currency","sort","a","b","base_currency","msg","type","product_ids","channels","jsonMsg","JSON","stringify","send","historicalDataURL","fetchHistoricalData","dataArr","formattedData","col2","i","length","val","push","MACD","require","macdInput","values","fastPeriod","slowPeriod","signalPeriod","SimpleMAOscillator","SimpleMASignal","calculate","date","Date","hour","getHours","minute","getMinutes","second","getSeconds","milliseconds","getMilliseconds","day","getDate","month","getMonth","year","getFullYear","final","console","log","onmessage","e","parse","product_id","handleSelect","unsubMsg","unsub","target","value","csv","Object","keys","HeikinAshi","assert","open","high","low","close","expectedOutput","describe","input","beforeEach","it","deepEqual","heikinAshi","result","nextValue","timestamp","volume","map","cur","idx","id","display_name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Dashboard from \"./components/Dashboard\";\nimport { formatData } from \"./utils\";\nimport \"./styles.css\";\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport { macd, sma } from \"technicalindicators\";\n\n\nexport default function App() {\n  const [currencies, setcurrencies] = useState([]);\n  const [pair, setpair] = useState(\"\");\n  const [price, setprice] = useState(\"0.00\");\n  //var [priceSMA, setpriceSMA] = useState(\"\");\n  const [priceOBV, setpriceOBV] = useState({});\n  const [pastData, setpastData] = useState({});\n  const [csvdata, setcsvdata] = useState({});\n  const ws = useRef(null);\n  var printarray=[];\n  var ssma=useState([]);\n  var macdarray=[];\n  const [macdarray2, setmacd2] = useState({});\n\n  let first = useRef(false);\n  const url = \"https://api.pro.coinbase.com\";\n\n  useEffect(() => {\n    ws.current = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n\n    let pairs = [];\n\n    const apiCall = async () => {\n      await fetch(url + \"/products\")\n        .then((res) => res.json())\n        .then((data) => (pairs = data));\n      \n      let filtered = pairs.filter((pair) => {\n        if (pair.quote_currency === \"USD\") {\n          return pair;\n        }\n      });\n\n      filtered = filtered.sort((a, b) => {\n        if (a.base_currency < b.base_currency) {\n          return -1;\n        }\n        if (a.base_currency > b.base_currency) {\n          return 1;\n        }\n        return 0;\n      });\n\n      \n      setcurrencies(filtered);\n\n      first.current = true;\n    };\n\n    apiCall();\n  }, []);\n\n  useEffect(() => {\n    if (!first.current) {\n      \n      return;\n    }\n\n    \n    let msg = {\n      type: \"subscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let jsonMsg = JSON.stringify(msg);\n    ws.current.send(jsonMsg);\n\n\n\n\n    \n    let historicalDataURL = `${url}/products/${pair}/candles?granularity=86400`;\n    const fetchHistoricalData = async () => {\n      let dataArr = [];\n      await fetch(historicalDataURL)\n        .then((res) => res.json())\n        .then((data) => (dataArr = data));\n      \n      let formattedData = formatData(dataArr);\n      setpastData(formattedData);\n     // setpriceSMA(sma(pastData))\n     // setpriceOBV(macd(pastData))\n      setcsvdata(dataArr)\n     let col2 = [];\n     for (let i=0;i<dataArr.length;i++){\n      let val = dataArr[i][2];\n      col2.push(val);\n    }\n      \n      var MACD = require('technicalindicators').MACD;\n      var macdInput = {\n      values            : col2,\n      fastPeriod        : 12,\n      slowPeriod        : 26,\n      signalPeriod      :  9,\n      SimpleMAOscillator: false,\n      SimpleMASignal    : false\n    }\n\nmacdarray=MACD.calculate(macdInput);\n\nfor (let i=0;i<macdarray.length;i++){\n  let date = new Date(dataArr[i][0] * 1000);\n\n  let hour = date.getHours();\n  let minute = date.getMinutes();\n  let second = date.getSeconds();\n  let milliseconds = date.getMilliseconds();\n\n  let day = date.getDate();\n  let month = date.getMonth() + 1;\n  let year = date.getFullYear();\n\n  let final = `${hour}:${minute}:${second}:${milliseconds}__${day}-${month}-${year}`;\n  macdarray[i][\"date\"]=final;\n  macdarray[i][\"closing\"]=dataArr[i][2];\n}\nconsole.log(\"done\");\nsetmacd2(macdarray)\n \n    };\n\nfetchHistoricalData();\n\n    ws.current.onmessage = (e) => {\n      let data = JSON.parse(e.data);\n      if (data.type !== \"ticker\") {\n        return;\n      }\n\n      if (data.product_id === pair) {\n        setprice(data.price);\n      }\n    };\n  }, [pair]);\n\n  const handleSelect = (e) => {\n    let unsubMsg = {\n      type: \"unsubscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let unsub = JSON.stringify(unsubMsg);\n\n    ws.current.send(unsub);\n\n    setpair(e.target.value);\n  };\n  \n  \n  let csv=[];\n  if(Object.keys(macdarray2).length>0){\n    csv.push(<CSVLink data={macdarray2}>Download CSV</CSVLink>);\n  }\n\n/**\n * Created by AAravindan on 5/4/16.\n */\n var HeikinAshi = require('../../lib/chart_types/HeikinAshi').HeikinAshi;\n var assert = require('assert');\n \n var data = {\n     open : [58.67,57.46,56.37,55.98,54.79,52.21,51.31,51.82,51.58],\n     high : [58.82,57.72,56.88,56.09,55.03,53.12,53.08,50.04,53.69],\n     low :  [57.03,56.21,55.35,54.17,52.32,50.59,49.93,50.80,51.34],\n     close: [57.73,56.27,56.81,54.17,53.83,50.59,53.03,50.86,53.10]\n }\n \n let expectedOutput = {\n         \"close\": [\n           58.0625,\n           56.915,\n           56.3525,\n           55.102500000000006,\n           53.9925,\n           51.627500000000005,\n           51.837500000000006,\n           50.879999999999995,\n           52.4275,\n         ],\n         \"high\": [\n           58.82,\n           58.13125,\n           57.523125,\n           56.9378125,\n           56.02015625,\n           55.006328124999996,\n           53.316914062500004,\n           52.577207031250005,\n           53.69,\n         ],\n         \"low\": [\n           57.03,\n           56.21,\n           55.35,\n           54.17,\n           52.32,\n           50.59,\n           49.93,\n           50.8,\n           51.34,\n         ],\n         \"open\": [\n           58.2,\n           58.13125,\n           57.523125,\n           56.9378125,\n           56.02015625,\n           55.006328124999996,\n           53.316914062500004,\n           52.577207031250005,\n           51.728603515625,\n         ],\n         \"timestamp\": [\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n         ],\n         \"volume\": [\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n         ]\n       }\n \n describe('HeikinAshi (Calculate Heikin ashi bars)', function() {\n   let input = {};\n   beforeEach(function(){\n     input = JSON.parse(JSON.stringify(data));\n   });\n \n   it('should calculate HeikinAshi using the calculate method', function() {\n     assert.deepEqual(HeikinAshi.calculate(input), expectedOutput,'Wrong Results');\n   });\n \n   it('should be able to get HeikinAshi for the next bar using nextValue', function() {\n     input.values = [];\n     var heikinAshi = new HeikinAshi(input);\n     var result = heikinAshi.nextValue({\n         open : 53.42,\n         high: 53.90,\n         low : 52.88,\n         close : 53.57 \n     });\n     assert.deepEqual(result,  { timestamp : 0, volume: 0, open : 52.0780517578125, high : 53.90, low : 52.0780517578125, close : 53.4425}, 'Wrong Results');\n   });\n });\n\n  return (\n    <div className=\"container\">\n      {\n        <select name=\"currency\" value={pair} onChange={handleSelect}>\n          {currencies.map((cur, idx) => {\n            return (\n              <option key={idx} value={cur.id}>\n                {cur.display_name}\n              </option>\n            );\n          })}\n        </select>\n      }\n      {csv}\n      <Dashboard price={price} data={pastData} />\n      {printarray}\n      <Dashboard price={price} data={pastData} />\n\n      obv macd crossing \n      slippage indicators\n      \n\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}