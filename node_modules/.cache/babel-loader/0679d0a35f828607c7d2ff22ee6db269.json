{"ast":null,"code":"/**\n * Created by AAravindan on 5/17/16.\n */\nimport { Indicator, IndicatorInput } from '../indicator/indicator';\nimport { TypicalPrice } from '../chart_types/TypicalPrice';\nimport FixedSizeLinkedList from '../Utils/FixedSizeLinkedList';\nexport class MFIInput extends IndicatorInput {}\nexport class MFI extends Indicator {\n  constructor(input) {\n    super(input);\n    var highs = input.high;\n    var lows = input.low;\n    var closes = input.close;\n    var volumes = input.volume;\n    var period = input.period;\n    var typicalPrice = new TypicalPrice({\n      low: [],\n      high: [],\n      close: []\n    });\n    var positiveFlow = new FixedSizeLinkedList(period, false, false, true);\n    var negativeFlow = new FixedSizeLinkedList(period, false, false, true);\n\n    if (!(lows.length === highs.length && highs.length === closes.length && highs.length === volumes.length)) {\n      throw 'Inputs(low,high, close, volumes) not of equal size';\n    }\n\n    this.result = [];\n\n    this.generator = function* () {\n      var result;\n      var tick;\n      var lastClose;\n      var positiveFlowForPeriod;\n      var rawMoneyFlow = 0;\n      var moneyFlowRatio;\n      var negativeFlowForPeriod;\n      let typicalPriceValue = null;\n      let prevousTypicalPrice = null;\n      tick = yield;\n      lastClose = tick.close; //Fist value \n\n      tick = yield;\n\n      while (true) {\n        var {\n          high,\n          low,\n          close,\n          volume\n        } = tick;\n        var positionMoney = 0;\n        var negativeMoney = 0;\n        typicalPriceValue = typicalPrice.nextValue({\n          high,\n          low,\n          close\n        });\n        rawMoneyFlow = typicalPriceValue * volume;\n\n        if (typicalPriceValue != null && prevousTypicalPrice != null) {\n          typicalPriceValue > prevousTypicalPrice ? positionMoney = rawMoneyFlow : negativeMoney = rawMoneyFlow;\n          positiveFlow.push(positionMoney);\n          negativeFlow.push(negativeMoney);\n          positiveFlowForPeriod = positiveFlow.periodSum;\n          negativeFlowForPeriod = negativeFlow.periodSum;\n\n          if (positiveFlow.totalPushed >= period && positiveFlow.totalPushed >= period) {\n            moneyFlowRatio = positiveFlowForPeriod / negativeFlowForPeriod;\n            result = 100 - 100 / (1 + moneyFlowRatio);\n          }\n        }\n\n        prevousTypicalPrice = typicalPriceValue;\n        tick = yield result;\n      }\n    }();\n\n    this.generator.next();\n    highs.forEach((tickHigh, index) => {\n      var tickInput = {\n        high: tickHigh,\n        low: lows[index],\n        close: closes[index],\n        volume: volumes[index]\n      };\n      var result = this.generator.next(tickInput);\n\n      if (result.value != undefined) {\n        this.result.push(parseFloat(result.value.toFixed(2)));\n      }\n    });\n  }\n\n  nextValue(price) {\n    var result = this.generator.next(price);\n\n    if (result.value != undefined) {\n      return parseFloat(result.value.toFixed(2));\n    }\n  }\n\n}\nMFI.calculate = mfi;\nexport function mfi(input) {\n  Indicator.reverseInputs(input);\n  var result = new MFI(input).result;\n\n  if (input.reversedInput) {\n    result.reverse();\n  }\n\n  Indicator.reverseInputs(input);\n  return result;\n}\n;","map":{"version":3,"sources":["/home/andre/Documents/ffff/node_modules/technicalindicators/lib/volume/MFI.js"],"names":["Indicator","IndicatorInput","TypicalPrice","FixedSizeLinkedList","MFIInput","MFI","constructor","input","highs","high","lows","low","closes","close","volumes","volume","period","typicalPrice","positiveFlow","negativeFlow","length","result","generator","tick","lastClose","positiveFlowForPeriod","rawMoneyFlow","moneyFlowRatio","negativeFlowForPeriod","typicalPriceValue","prevousTypicalPrice","positionMoney","negativeMoney","nextValue","push","periodSum","totalPushed","next","forEach","tickHigh","index","tickInput","value","undefined","parseFloat","toFixed","price","calculate","mfi","reverseInputs","reversedInput","reverse"],"mappings":"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","sourcesContent":["/**\n * Created by AAravindan on 5/17/16.\n */\nimport { Indicator, IndicatorInput } from '../indicator/indicator';\nimport { TypicalPrice } from '../chart_types/TypicalPrice';\nimport FixedSizeLinkedList from '../Utils/FixedSizeLinkedList';\nexport class MFIInput extends IndicatorInput {\n}\nexport class MFI extends Indicator {\n    constructor(input) {\n        super(input);\n        var highs = input.high;\n        var lows = input.low;\n        var closes = input.close;\n        var volumes = input.volume;\n        var period = input.period;\n        var typicalPrice = new TypicalPrice({ low: [], high: [], close: [] });\n        var positiveFlow = new FixedSizeLinkedList(period, false, false, true);\n        var negativeFlow = new FixedSizeLinkedList(period, false, false, true);\n        if (!((lows.length === highs.length) && (highs.length === closes.length) && (highs.length === volumes.length))) {\n            throw ('Inputs(low,high, close, volumes) not of equal size');\n        }\n        this.result = [];\n        this.generator = (function* () {\n            var result;\n            var tick;\n            var lastClose;\n            var positiveFlowForPeriod;\n            var rawMoneyFlow = 0;\n            var moneyFlowRatio;\n            var negativeFlowForPeriod;\n            let typicalPriceValue = null;\n            let prevousTypicalPrice = null;\n            tick = yield;\n            lastClose = tick.close; //Fist value \n            tick = yield;\n            while (true) {\n                var { high, low, close, volume } = tick;\n                var positionMoney = 0;\n                var negativeMoney = 0;\n                typicalPriceValue = typicalPrice.nextValue({ high, low, close });\n                rawMoneyFlow = typicalPriceValue * volume;\n                if ((typicalPriceValue != null) && (prevousTypicalPrice != null)) {\n                    typicalPriceValue > prevousTypicalPrice ? positionMoney = rawMoneyFlow : negativeMoney = rawMoneyFlow;\n                    positiveFlow.push(positionMoney);\n                    negativeFlow.push(negativeMoney);\n                    positiveFlowForPeriod = positiveFlow.periodSum;\n                    negativeFlowForPeriod = negativeFlow.periodSum;\n                    if ((positiveFlow.totalPushed >= period) && (positiveFlow.totalPushed >= period)) {\n                        moneyFlowRatio = positiveFlowForPeriod / negativeFlowForPeriod;\n                        result = 100 - 100 / (1 + moneyFlowRatio);\n                    }\n                }\n                prevousTypicalPrice = typicalPriceValue;\n                tick = yield result;\n            }\n        })();\n        this.generator.next();\n        highs.forEach((tickHigh, index) => {\n            var tickInput = {\n                high: tickHigh,\n                low: lows[index],\n                close: closes[index],\n                volume: volumes[index]\n            };\n            var result = this.generator.next(tickInput);\n            if (result.value != undefined) {\n                this.result.push(parseFloat(result.value.toFixed(2)));\n            }\n        });\n    }\n    ;\n    nextValue(price) {\n        var result = this.generator.next(price);\n        if (result.value != undefined) {\n            return (parseFloat(result.value.toFixed(2)));\n        }\n    }\n    ;\n}\nMFI.calculate = mfi;\nexport function mfi(input) {\n    Indicator.reverseInputs(input);\n    var result = new MFI(input).result;\n    if (input.reversedInput) {\n        result.reverse();\n    }\n    Indicator.reverseInputs(input);\n    return result;\n}\n;\n"]},"metadata":{},"sourceType":"module"}