{"ast":null,"code":"var _jsxFileName = \"/home/andre/Documents/f/f/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Dashboard from \"./components/Dashboard\";\nimport { formatData } from \"./utils\";\nimport \"./styles.css\";\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport { macd, sma } from \"technicalindicators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [currencies, setcurrencies] = useState([]);\n  const [pair, setpair] = useState(\"\");\n  const [price, setprice] = useState(\"0.00\"); //var [priceSMA, setpriceSMA] = useState(\"\");\n\n  const [priceOBV, setpriceOBV] = useState({});\n  const [pastData, setpastData] = useState({});\n  const [csvdata, setcsvdata] = useState({});\n  const ws = useRef(null);\n  var printarray = [];\n  var ssma = useState([]);\n  let first = useRef(false);\n  const url = \"https://api.pro.coinbase.com\";\n  useEffect(() => {\n    ws.current = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n    let pairs = [];\n\n    const apiCall = async () => {\n      await fetch(url + \"/products\").then(res => res.json()).then(data => pairs = data);\n      let filtered = pairs.filter(pair => {\n        if (pair.quote_currency === \"USD\") {\n          return pair;\n        }\n      });\n      filtered = filtered.sort((a, b) => {\n        if (a.base_currency < b.base_currency) {\n          return -1;\n        }\n\n        if (a.base_currency > b.base_currency) {\n          return 1;\n        }\n\n        return 0;\n      });\n      setcurrencies(filtered);\n      first.current = true;\n    };\n\n    apiCall();\n  }, []);\n  useEffect(() => {\n    if (!first.current) {\n      return;\n    }\n\n    let msg = {\n      type: \"subscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let jsonMsg = JSON.stringify(msg);\n    ws.current.send(jsonMsg);\n    let historicalDataURL = `${url}/products/${pair}/candles?granularity=86400`;\n\n    const fetchHistoricalData = async () => {\n      let dataArr = [];\n      await fetch(historicalDataURL).then(res => res.json()).then(data => dataArr = data);\n      let formattedData = formatData(dataArr);\n      setpastData(formattedData); // setpriceSMA(sma(pastData))\n      // setpriceOBV(macd(pastData))\n\n      setcsvdata(dataArr);\n\n      const sma = require('technicalindicators').sma;\n\n      var prices = dataArr;\n      var period = 10;\n      ssma = sma({\n        period: period,\n        values: prices\n      });\n\n      for (let i = 0; i < dataArr.length; i++) {\n        printarray.push( /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"dataArr[i]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 19\n        }, this));\n      }\n    };\n\n    fetchHistoricalData();\n\n    ws.current.onmessage = e => {\n      let data = JSON.parse(e.data);\n\n      if (data.type !== \"ticker\") {\n        return;\n      }\n\n      if (data.product_id === pair) {\n        setprice(data.price);\n      }\n    };\n  }, [pair]); //const csvData=csvdata;\n  // const csvData = [\n  //   [\"firstname\", \"lastname\", \"email\"],\n  //   [\"Ahmed\", \"Tomi\", \"ah@smthing.co.com\"],\n  //   [\"Raed\", \"Labes\", \"rl@smthing.co.com\"],\n  //   [\"Yezzi\", \"Min l3b\", \"ymin@cocococo.com\"]\n  // ];\n\n  const handleSelect = e => {\n    let unsubMsg = {\n      type: \"unsubscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let unsub = JSON.stringify(unsubMsg);\n    ws.current.send(unsub);\n    setpair(e.target.value);\n  };\n\n  let csv = [];\n\n  if (Object.keys(csvdata).length > 0) {\n    csv.push( /*#__PURE__*/_jsxDEV(CSVLink, {\n      data: csvdata,\n      children: \"Download CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 14\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"currency\",\n      value: pair,\n      onChange: handleSelect,\n      children: currencies.map((cur, idx) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: cur.id,\n          children: cur.display_name\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this), csv, /*#__PURE__*/_jsxDEV(Dashboard, {\n      price: price,\n      data: pastData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), printarray, /*#__PURE__*/_jsxDEV(Dashboard, {\n      price: price,\n      data: pastData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), \"obv macd crossing slippage indicators\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ddR4ciaGmxyHpig8YvH+klzCftc=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/andre/Documents/f/f/src/App.js"],"names":["React","useState","useEffect","useRef","Dashboard","formatData","CSVLink","CSVDownload","macd","sma","App","currencies","setcurrencies","pair","setpair","price","setprice","priceOBV","setpriceOBV","pastData","setpastData","csvdata","setcsvdata","ws","printarray","ssma","first","url","current","WebSocket","pairs","apiCall","fetch","then","res","json","data","filtered","filter","quote_currency","sort","a","b","base_currency","msg","type","product_ids","channels","jsonMsg","JSON","stringify","send","historicalDataURL","fetchHistoricalData","dataArr","formattedData","require","prices","period","values","i","length","push","onmessage","e","parse","product_id","handleSelect","unsubMsg","unsub","target","value","csv","Object","keys","map","cur","idx","id","display_name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,OAAO,cAAP;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,WAArC;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,qBAA1B;;AAGA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,MAAD,CAAlC,CAH4B,CAI5B;;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACoB,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMsB,EAAE,GAAGpB,MAAM,CAAC,IAAD,CAAjB;AACA,MAAIqB,UAAU,GAAC,EAAf;AACA,MAAIC,IAAI,GAACxB,QAAQ,CAAC,EAAD,CAAjB;AAEA,MAAIyB,KAAK,GAAGvB,MAAM,CAAC,KAAD,CAAlB;AACA,QAAMwB,GAAG,GAAG,8BAAZ;AAEAzB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,EAAE,CAACK,OAAH,GAAa,IAAIC,SAAJ,CAAc,gCAAd,CAAb;AAEA,QAAIC,KAAK,GAAG,EAAZ;;AAEA,UAAMC,OAAO,GAAG,YAAY;AAC1B,YAAMC,KAAK,CAACL,GAAG,GAAG,WAAP,CAAL,CACHM,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAWN,KAAK,GAAGM,IAFrB,CAAN;AAIA,UAAIC,QAAQ,GAAGP,KAAK,CAACQ,MAAN,CAAczB,IAAD,IAAU;AACpC,YAAIA,IAAI,CAAC0B,cAAL,KAAwB,KAA5B,EAAmC;AACjC,iBAAO1B,IAAP;AACD;AACF,OAJc,CAAf;AAMAwB,MAAAA,QAAQ,GAAGA,QAAQ,CAACG,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,YAAID,CAAC,CAACE,aAAF,GAAkBD,CAAC,CAACC,aAAxB,EAAuC;AACrC,iBAAO,CAAC,CAAR;AACD;;AACD,YAAIF,CAAC,CAACE,aAAF,GAAkBD,CAAC,CAACC,aAAxB,EAAuC;AACrC,iBAAO,CAAP;AACD;;AACD,eAAO,CAAP;AACD,OARU,CAAX;AAWA/B,MAAAA,aAAa,CAACyB,QAAD,CAAb;AAEAX,MAAAA,KAAK,CAACE,OAAN,GAAgB,IAAhB;AACD,KAzBD;;AA2BAG,IAAAA,OAAO;AACR,GAjCQ,EAiCN,EAjCM,CAAT;AAmCA7B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACwB,KAAK,CAACE,OAAX,EAAoB;AAElB;AACD;;AAGD,QAAIgB,GAAG,GAAG;AACRC,MAAAA,IAAI,EAAE,WADE;AAERC,MAAAA,WAAW,EAAE,CAACjC,IAAD,CAFL;AAGRkC,MAAAA,QAAQ,EAAE,CAAC,QAAD;AAHF,KAAV;AAKA,QAAIC,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAeN,GAAf,CAAd;AACArB,IAAAA,EAAE,CAACK,OAAH,CAAWuB,IAAX,CAAgBH,OAAhB;AAMA,QAAII,iBAAiB,GAAI,GAAEzB,GAAI,aAAYd,IAAK,4BAAhD;;AACA,UAAMwC,mBAAmB,GAAG,YAAY;AACtC,UAAIC,OAAO,GAAG,EAAd;AACA,YAAMtB,KAAK,CAACoB,iBAAD,CAAL,CACHnB,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAWkB,OAAO,GAAGlB,IAFvB,CAAN;AAIA,UAAImB,aAAa,GAAGlD,UAAU,CAACiD,OAAD,CAA9B;AACAlC,MAAAA,WAAW,CAACmC,aAAD,CAAX,CAPsC,CAQvC;AACA;;AACCjC,MAAAA,UAAU,CAACgC,OAAD,CAAV;;AACA,YAAM7C,GAAG,GAAG+C,OAAO,CAAC,qBAAD,CAAP,CAA+B/C,GAA3C;;AACN,UAAIgD,MAAM,GAAGH,OAAb;AACA,UAAII,MAAM,GAAG,EAAb;AACAjC,MAAAA,IAAI,GAAChB,GAAG,CAAC;AAACiD,QAAAA,MAAM,EAAGA,MAAV;AAAkBC,QAAAA,MAAM,EAAGF;AAA3B,OAAD,CAAR;;AACA,WAAK,IAAIG,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACN,OAAO,CAACO,MAAvB,EAA8BD,CAAC,EAA/B,EAAkC;AAChCpC,QAAAA,UAAU,CAACsC,IAAX,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAhB;AACD;AACI,KAlBD;;AAoBJT,IAAAA,mBAAmB;;AAEf9B,IAAAA,EAAE,CAACK,OAAH,CAAWmC,SAAX,GAAwBC,CAAD,IAAO;AAC5B,UAAI5B,IAAI,GAAGa,IAAI,CAACgB,KAAL,CAAWD,CAAC,CAAC5B,IAAb,CAAX;;AACA,UAAIA,IAAI,CAACS,IAAL,KAAc,QAAlB,EAA4B;AAC1B;AACD;;AAED,UAAIT,IAAI,CAAC8B,UAAL,KAAoBrD,IAAxB,EAA8B;AAC5BG,QAAAA,QAAQ,CAACoB,IAAI,CAACrB,KAAN,CAAR;AACD;AACF,KATD;AAUD,GApDQ,EAoDN,CAACF,IAAD,CApDM,CAAT,CAlD4B,CAyG5B;AACD;AACA;AACA;AACA;AACA;AACA;;AAGC,QAAMsD,YAAY,GAAIH,CAAD,IAAO;AAC1B,QAAII,QAAQ,GAAG;AACbvB,MAAAA,IAAI,EAAE,aADO;AAEbC,MAAAA,WAAW,EAAE,CAACjC,IAAD,CAFA;AAGbkC,MAAAA,QAAQ,EAAE,CAAC,QAAD;AAHG,KAAf;AAKA,QAAIsB,KAAK,GAAGpB,IAAI,CAACC,SAAL,CAAekB,QAAf,CAAZ;AAEA7C,IAAAA,EAAE,CAACK,OAAH,CAAWuB,IAAX,CAAgBkB,KAAhB;AAEAvD,IAAAA,OAAO,CAACkD,CAAC,CAACM,MAAF,CAASC,KAAV,CAAP;AACD,GAXD;;AAcA,MAAIC,GAAG,GAAC,EAAR;;AACA,MAAGC,MAAM,CAACC,IAAP,CAAYrD,OAAZ,EAAqBwC,MAArB,GAA4B,CAA/B,EAAiC;AAC/BW,IAAAA,GAAG,CAACV,IAAJ,eAAS,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEzC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAT;AACD;;AACD,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BAEI;AAAQ,MAAA,IAAI,EAAC,UAAb;AAAwB,MAAA,KAAK,EAAER,IAA/B;AAAqC,MAAA,QAAQ,EAAEsD,YAA/C;AAAA,gBACGxD,UAAU,CAACgE,GAAX,CAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5B,4BACE;AAAkB,UAAA,KAAK,EAAED,GAAG,CAACE,EAA7B;AAAA,oBACGF,GAAG,CAACG;AADP,WAAaF,GAAb;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD,OANA;AADH;AAAA;AAAA;AAAA;AAAA,YAFJ,EAYGL,GAZH,eAaE,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEzD,KAAlB;AAAyB,MAAA,IAAI,EAAEI;AAA/B;AAAA;AAAA;AAAA;AAAA,YAbF,EAcGK,UAdH,eAeE,QAAC,SAAD;AAAW,MAAA,KAAK,EAAET,KAAlB;AAAyB,MAAA,IAAI,EAAEI;AAA/B;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GA3JuBT,G;;KAAAA,G","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Dashboard from \"./components/Dashboard\";\nimport { formatData } from \"./utils\";\nimport \"./styles.css\";\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport { macd, sma } from \"technicalindicators\";\n\n\nexport default function App() {\n  const [currencies, setcurrencies] = useState([]);\n  const [pair, setpair] = useState(\"\");\n  const [price, setprice] = useState(\"0.00\");\n  //var [priceSMA, setpriceSMA] = useState(\"\");\n  const [priceOBV, setpriceOBV] = useState({});\n  const [pastData, setpastData] = useState({});\n  const [csvdata, setcsvdata] = useState({});\n  const ws = useRef(null);\n  var printarray=[];\n  var ssma=useState([]);\n\n  let first = useRef(false);\n  const url = \"https://api.pro.coinbase.com\";\n\n  useEffect(() => {\n    ws.current = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n\n    let pairs = [];\n\n    const apiCall = async () => {\n      await fetch(url + \"/products\")\n        .then((res) => res.json())\n        .then((data) => (pairs = data));\n      \n      let filtered = pairs.filter((pair) => {\n        if (pair.quote_currency === \"USD\") {\n          return pair;\n        }\n      });\n\n      filtered = filtered.sort((a, b) => {\n        if (a.base_currency < b.base_currency) {\n          return -1;\n        }\n        if (a.base_currency > b.base_currency) {\n          return 1;\n        }\n        return 0;\n      });\n\n      \n      setcurrencies(filtered);\n\n      first.current = true;\n    };\n\n    apiCall();\n  }, []);\n\n  useEffect(() => {\n    if (!first.current) {\n      \n      return;\n    }\n\n    \n    let msg = {\n      type: \"subscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let jsonMsg = JSON.stringify(msg);\n    ws.current.send(jsonMsg);\n\n\n\n\n    \n    let historicalDataURL = `${url}/products/${pair}/candles?granularity=86400`;\n    const fetchHistoricalData = async () => {\n      let dataArr = [];\n      await fetch(historicalDataURL)\n        .then((res) => res.json())\n        .then((data) => (dataArr = data));\n      \n      let formattedData = formatData(dataArr);\n      setpastData(formattedData);\n     // setpriceSMA(sma(pastData))\n     // setpriceOBV(macd(pastData))\n      setcsvdata(dataArr)\n      const sma = require('technicalindicators').sma;\nvar prices = dataArr;\nvar period = 10;\nssma=sma({period : period, values : prices});\nfor (let i=0;i<dataArr.length;i++){\n  printarray.push(<p>dataArr[i]</p>);\n}\n    };\n\nfetchHistoricalData();\n\n    ws.current.onmessage = (e) => {\n      let data = JSON.parse(e.data);\n      if (data.type !== \"ticker\") {\n        return;\n      }\n\n      if (data.product_id === pair) {\n        setprice(data.price);\n      }\n    };\n  }, [pair]);\n\n\n  //const csvData=csvdata;\n // const csvData = [\n //   [\"firstname\", \"lastname\", \"email\"],\n //   [\"Ahmed\", \"Tomi\", \"ah@smthing.co.com\"],\n //   [\"Raed\", \"Labes\", \"rl@smthing.co.com\"],\n //   [\"Yezzi\", \"Min l3b\", \"ymin@cocococo.com\"]\n // ];\n\n\n  const handleSelect = (e) => {\n    let unsubMsg = {\n      type: \"unsubscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let unsub = JSON.stringify(unsubMsg);\n\n    ws.current.send(unsub);\n\n    setpair(e.target.value);\n  };\n  \n  \n  let csv=[];\n  if(Object.keys(csvdata).length>0){\n    csv.push(<CSVLink data={csvdata}>Download CSV</CSVLink>);\n  }\n  return (\n    <div className=\"container\">\n      {\n        <select name=\"currency\" value={pair} onChange={handleSelect}>\n          {currencies.map((cur, idx) => {\n            return (\n              <option key={idx} value={cur.id}>\n                {cur.display_name}\n              </option>\n            );\n          })}\n        </select>\n      }\n      {csv}\n      <Dashboard price={price} data={pastData} />\n      {printarray}\n      <Dashboard price={price} data={pastData} />\n\n      obv macd crossing \n      slippage indicators\n\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}