{"ast":null,"code":"/**\n * Created by AAravindan on 5/17/16.\n */\nimport { Indicator, IndicatorInput } from '../indicator/indicator';\nexport class ADLInput extends IndicatorInput {}\nexport class ADL extends Indicator {\n  constructor(input) {\n    super(input);\n    var highs = input.high;\n    var lows = input.low;\n    var closes = input.close;\n    var volumes = input.volume;\n\n    if (!(lows.length === highs.length && highs.length === closes.length && highs.length === volumes.length)) {\n      throw 'Inputs(low,high, close, volumes) not of equal size';\n    }\n\n    this.result = [];\n\n    this.generator = function* () {\n      var result = 0;\n      var tick;\n      tick = yield;\n\n      while (true) {\n        let moneyFlowMultiplier = (tick.close - tick.low - (tick.high - tick.close)) / (tick.high - tick.low);\n        moneyFlowMultiplier = isNaN(moneyFlowMultiplier) ? 1 : moneyFlowMultiplier;\n        let moneyFlowVolume = moneyFlowMultiplier * tick.volume;\n        result = result + moneyFlowVolume;\n        tick = yield Math.round(result);\n      }\n    }();\n\n    this.generator.next();\n    highs.forEach((tickHigh, index) => {\n      var tickInput = {\n        high: tickHigh,\n        low: lows[index],\n        close: closes[index],\n        volume: volumes[index]\n      };\n      var result = this.generator.next(tickInput);\n\n      if (result.value != undefined) {\n        this.result.push(result.value);\n      }\n    });\n  }\n\n  nextValue(price) {\n    return this.generator.next(price).value;\n  }\n\n}\nADL.calculate = adl;\nexport function adl(input) {\n  Indicator.reverseInputs(input);\n  var result = new ADL(input).result;\n\n  if (input.reversedInput) {\n    result.reverse();\n  }\n\n  Indicator.reverseInputs(input);\n  return result;\n}\n;","map":{"version":3,"sources":["/home/andre/Documents/ffff/node_modules/technicalindicators/lib/volume/ADL.js"],"names":["Indicator","IndicatorInput","ADLInput","ADL","constructor","input","highs","high","lows","low","closes","close","volumes","volume","length","result","generator","tick","moneyFlowMultiplier","isNaN","moneyFlowVolume","Math","round","next","forEach","tickHigh","index","tickInput","value","undefined","push","nextValue","price","calculate","adl","reverseInputs","reversedInput","reverse"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,wBAA1C;AACA,OAAO,MAAMC,QAAN,SAAuBD,cAAvB,CAAsC;AAE7C,OAAO,MAAME,GAAN,SAAkBH,SAAlB,CAA4B;AAC/BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,QAAIC,KAAK,GAAGD,KAAK,CAACE,IAAlB;AACA,QAAIC,IAAI,GAAGH,KAAK,CAACI,GAAjB;AACA,QAAIC,MAAM,GAAGL,KAAK,CAACM,KAAnB;AACA,QAAIC,OAAO,GAAGP,KAAK,CAACQ,MAApB;;AACA,QAAI,EAAGL,IAAI,CAACM,MAAL,KAAgBR,KAAK,CAACQ,MAAvB,IAAmCR,KAAK,CAACQ,MAAN,KAAiBJ,MAAM,CAACI,MAA3D,IAAuER,KAAK,CAACQ,MAAN,KAAiBF,OAAO,CAACE,MAAlG,CAAJ,EAAgH;AAC5G,YAAO,oDAAP;AACH;;AACD,SAAKC,MAAL,GAAc,EAAd;;AACA,SAAKC,SAAL,GAAkB,aAAa;AAC3B,UAAID,MAAM,GAAG,CAAb;AACA,UAAIE,IAAJ;AACAA,MAAAA,IAAI,GAAG,KAAP;;AACA,aAAO,IAAP,EAAa;AACT,YAAIC,mBAAmB,GAAG,CAAED,IAAI,CAACN,KAAL,GAAaM,IAAI,CAACR,GAAnB,IAA2BQ,IAAI,CAACV,IAAL,GAAYU,IAAI,CAACN,KAA5C,CAAD,KAAwDM,IAAI,CAACV,IAAL,GAAYU,IAAI,CAACR,GAAzE,CAA1B;AACAS,QAAAA,mBAAmB,GAAGC,KAAK,CAACD,mBAAD,CAAL,GAA6B,CAA7B,GAAiCA,mBAAvD;AACA,YAAIE,eAAe,GAAGF,mBAAmB,GAAGD,IAAI,CAACJ,MAAjD;AACAE,QAAAA,MAAM,GAAGA,MAAM,GAAGK,eAAlB;AACAH,QAAAA,IAAI,GAAG,MAAMI,IAAI,CAACC,KAAL,CAAWP,MAAX,CAAb;AACH;AACJ,KAXgB,EAAjB;;AAYA,SAAKC,SAAL,CAAeO,IAAf;AACAjB,IAAAA,KAAK,CAACkB,OAAN,CAAc,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAC/B,UAAIC,SAAS,GAAG;AACZpB,QAAAA,IAAI,EAAEkB,QADM;AAEZhB,QAAAA,GAAG,EAAED,IAAI,CAACkB,KAAD,CAFG;AAGZf,QAAAA,KAAK,EAAED,MAAM,CAACgB,KAAD,CAHD;AAIZb,QAAAA,MAAM,EAAED,OAAO,CAACc,KAAD;AAJH,OAAhB;AAMA,UAAIX,MAAM,GAAG,KAAKC,SAAL,CAAeO,IAAf,CAAoBI,SAApB,CAAb;;AACA,UAAIZ,MAAM,CAACa,KAAP,IAAgBC,SAApB,EAA+B;AAC3B,aAAKd,MAAL,CAAYe,IAAZ,CAAiBf,MAAM,CAACa,KAAxB;AACH;AACJ,KAXD;AAYH;;AAEDG,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,WAAO,KAAKhB,SAAL,CAAeO,IAAf,CAAoBS,KAApB,EAA2BJ,KAAlC;AACH;;AAxC8B;AA2CnCzB,GAAG,CAAC8B,SAAJ,GAAgBC,GAAhB;AACA,OAAO,SAASA,GAAT,CAAa7B,KAAb,EAAoB;AACvBL,EAAAA,SAAS,CAACmC,aAAV,CAAwB9B,KAAxB;AACA,MAAIU,MAAM,GAAG,IAAIZ,GAAJ,CAAQE,KAAR,EAAeU,MAA5B;;AACA,MAAIV,KAAK,CAAC+B,aAAV,EAAyB;AACrBrB,IAAAA,MAAM,CAACsB,OAAP;AACH;;AACDrC,EAAAA,SAAS,CAACmC,aAAV,CAAwB9B,KAAxB;AACA,SAAOU,MAAP;AACH;AACD","sourcesContent":["/**\n * Created by AAravindan on 5/17/16.\n */\nimport { Indicator, IndicatorInput } from '../indicator/indicator';\nexport class ADLInput extends IndicatorInput {\n}\nexport class ADL extends Indicator {\n    constructor(input) {\n        super(input);\n        var highs = input.high;\n        var lows = input.low;\n        var closes = input.close;\n        var volumes = input.volume;\n        if (!((lows.length === highs.length) && (highs.length === closes.length) && (highs.length === volumes.length))) {\n            throw ('Inputs(low,high, close, volumes) not of equal size');\n        }\n        this.result = [];\n        this.generator = (function* () {\n            var result = 0;\n            var tick;\n            tick = yield;\n            while (true) {\n                let moneyFlowMultiplier = ((tick.close - tick.low) - (tick.high - tick.close)) / (tick.high - tick.low);\n                moneyFlowMultiplier = isNaN(moneyFlowMultiplier) ? 1 : moneyFlowMultiplier;\n                let moneyFlowVolume = moneyFlowMultiplier * tick.volume;\n                result = result + moneyFlowVolume;\n                tick = yield Math.round(result);\n            }\n        })();\n        this.generator.next();\n        highs.forEach((tickHigh, index) => {\n            var tickInput = {\n                high: tickHigh,\n                low: lows[index],\n                close: closes[index],\n                volume: volumes[index]\n            };\n            var result = this.generator.next(tickInput);\n            if (result.value != undefined) {\n                this.result.push(result.value);\n            }\n        });\n    }\n    ;\n    nextValue(price) {\n        return this.generator.next(price).value;\n    }\n    ;\n}\nADL.calculate = adl;\nexport function adl(input) {\n    Indicator.reverseInputs(input);\n    var result = new ADL(input).result;\n    if (input.reversedInput) {\n        result.reverse();\n    }\n    Indicator.reverseInputs(input);\n    return result;\n}\n;\n"]},"metadata":{},"sourceType":"module"}