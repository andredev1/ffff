{"ast":null,"code":"import { Indicator, IndicatorInput } from '../indicator/indicator';\nimport FixedSizedLinkedList from './FixedSizeLinkedList';\nexport class HighestInput extends IndicatorInput {}\nexport class Highest extends Indicator {\n  constructor(input) {\n    super(input);\n    var values = input.values;\n    var period = input.period;\n    this.result = [];\n    var periodList = new FixedSizedLinkedList(period, true, false, false);\n\n    this.generator = function* () {\n      var result;\n      var tick;\n      var high;\n      tick = yield;\n\n      while (true) {\n        periodList.push(tick);\n\n        if (periodList.totalPushed >= period) {\n          high = periodList.periodHigh;\n        }\n\n        tick = yield high;\n      }\n    }();\n\n    this.generator.next();\n    values.forEach((value, index) => {\n      var result = this.generator.next(value);\n\n      if (result.value != undefined) {\n        this.result.push(result.value);\n      }\n    });\n  }\n\n  nextValue(price) {\n    var result = this.generator.next(price);\n\n    if (result.value != undefined) {\n      return result.value;\n    }\n  }\n\n}\nHighest.calculate = highest;\nexport function highest(input) {\n  Indicator.reverseInputs(input);\n  var result = new Highest(input).result;\n\n  if (input.reversedInput) {\n    result.reverse();\n  }\n\n  Indicator.reverseInputs(input);\n  return result;\n}\n;","map":{"version":3,"sources":["/home/andre/Downloads/ffff-main/node_modules/technicalindicators/lib/Utils/Highest.js"],"names":["Indicator","IndicatorInput","FixedSizedLinkedList","HighestInput","Highest","constructor","input","values","period","result","periodList","generator","tick","high","push","totalPushed","periodHigh","next","forEach","value","index","undefined","nextValue","price","calculate","highest","reverseInputs","reversedInput","reverse"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,wBAA1C;AACA,OAAOC,oBAAP,MAAiC,uBAAjC;AACA,OAAO,MAAMC,YAAN,SAA2BF,cAA3B,CAA0C;AAEjD,OAAO,MAAMG,OAAN,SAAsBJ,SAAtB,CAAgC;AACnCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,QAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;AACA,QAAIC,MAAM,GAAGF,KAAK,CAACE,MAAnB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,QAAIC,UAAU,GAAG,IAAIR,oBAAJ,CAAyBM,MAAzB,EAAiC,IAAjC,EAAuC,KAAvC,EAA8C,KAA9C,CAAjB;;AACA,SAAKG,SAAL,GAAkB,aAAa;AAC3B,UAAIF,MAAJ;AACA,UAAIG,IAAJ;AACA,UAAIC,IAAJ;AACAD,MAAAA,IAAI,GAAG,KAAP;;AACA,aAAO,IAAP,EAAa;AACTF,QAAAA,UAAU,CAACI,IAAX,CAAgBF,IAAhB;;AACA,YAAIF,UAAU,CAACK,WAAX,IAA0BP,MAA9B,EAAsC;AAClCK,UAAAA,IAAI,GAAGH,UAAU,CAACM,UAAlB;AACH;;AACDJ,QAAAA,IAAI,GAAG,MAAMC,IAAb;AACH;AACJ,KAZgB,EAAjB;;AAaA,SAAKF,SAAL,CAAeM,IAAf;AACAV,IAAAA,MAAM,CAACW,OAAP,CAAe,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC7B,UAAIX,MAAM,GAAG,KAAKE,SAAL,CAAeM,IAAf,CAAoBE,KAApB,CAAb;;AACA,UAAIV,MAAM,CAACU,KAAP,IAAgBE,SAApB,EAA+B;AAC3B,aAAKZ,MAAL,CAAYK,IAAZ,CAAiBL,MAAM,CAACU,KAAxB;AACH;AACJ,KALD;AAMH;;AAEDG,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,QAAId,MAAM,GAAG,KAAKE,SAAL,CAAeM,IAAf,CAAoBM,KAApB,CAAb;;AACA,QAAId,MAAM,CAACU,KAAP,IAAgBE,SAApB,EAA+B;AAC3B,aAAOZ,MAAM,CAACU,KAAd;AACH;AACJ;;AAlCkC;AAqCvCf,OAAO,CAACoB,SAAR,GAAoBC,OAApB;AACA,OAAO,SAASA,OAAT,CAAiBnB,KAAjB,EAAwB;AAC3BN,EAAAA,SAAS,CAAC0B,aAAV,CAAwBpB,KAAxB;AACA,MAAIG,MAAM,GAAG,IAAIL,OAAJ,CAAYE,KAAZ,EAAmBG,MAAhC;;AACA,MAAIH,KAAK,CAACqB,aAAV,EAAyB;AACrBlB,IAAAA,MAAM,CAACmB,OAAP;AACH;;AACD5B,EAAAA,SAAS,CAAC0B,aAAV,CAAwBpB,KAAxB;AACA,SAAOG,MAAP;AACH;AACD","sourcesContent":["import { Indicator, IndicatorInput } from '../indicator/indicator';\nimport FixedSizedLinkedList from './FixedSizeLinkedList';\nexport class HighestInput extends IndicatorInput {\n}\nexport class Highest extends Indicator {\n    constructor(input) {\n        super(input);\n        var values = input.values;\n        var period = input.period;\n        this.result = [];\n        var periodList = new FixedSizedLinkedList(period, true, false, false);\n        this.generator = (function* () {\n            var result;\n            var tick;\n            var high;\n            tick = yield;\n            while (true) {\n                periodList.push(tick);\n                if (periodList.totalPushed >= period) {\n                    high = periodList.periodHigh;\n                }\n                tick = yield high;\n            }\n        })();\n        this.generator.next();\n        values.forEach((value, index) => {\n            var result = this.generator.next(value);\n            if (result.value != undefined) {\n                this.result.push(result.value);\n            }\n        });\n    }\n    ;\n    nextValue(price) {\n        var result = this.generator.next(price);\n        if (result.value != undefined) {\n            return result.value;\n        }\n    }\n    ;\n}\nHighest.calculate = highest;\nexport function highest(input) {\n    Indicator.reverseInputs(input);\n    var result = new Highest(input).result;\n    if (input.reversedInput) {\n        result.reverse();\n    }\n    Indicator.reverseInputs(input);\n    return result;\n}\n;\n"]},"metadata":{},"sourceType":"module"}