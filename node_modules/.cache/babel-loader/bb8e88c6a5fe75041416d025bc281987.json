{"ast":null,"code":"import { Indicator, IndicatorInput } from '../indicator/indicator';\nimport { SMA } from '../moving_averages/SMA';\nimport { EMA } from '../moving_averages/EMA';\nimport { ATR } from '../directionalmovement/ATR';\nexport class KeltnerChannelsInput extends IndicatorInput {\n  constructor() {\n    super(...arguments);\n    this.maPeriod = 20;\n    this.atrPeriod = 10;\n    this.useSMA = false;\n    this.multiplier = 1;\n  }\n\n}\nexport class KeltnerChannelsOutput extends IndicatorInput {}\n;\nexport class KeltnerChannels extends Indicator {\n  constructor(input) {\n    super(input);\n    var maType = input.useSMA ? SMA : EMA;\n    var maProducer = new maType({\n      period: input.maPeriod,\n      values: [],\n      format: v => {\n        return v;\n      }\n    });\n    var atrProducer = new ATR({\n      period: input.atrPeriod,\n      high: [],\n      low: [],\n      close: [],\n      format: v => {\n        return v;\n      }\n    });\n    var tick;\n    this.result = [];\n\n    this.generator = function* () {\n      var KeltnerChannelsOutput;\n      var result;\n      tick = yield;\n\n      while (true) {\n        var {\n          close\n        } = tick;\n        var ma = maProducer.nextValue(close);\n        var atr = atrProducer.nextValue(tick);\n\n        if (ma != undefined && atr != undefined) {\n          result = {\n            middle: ma,\n            upper: ma + input.multiplier * atr,\n            lower: ma - input.multiplier * atr\n          };\n        }\n\n        tick = yield result;\n      }\n    }();\n\n    this.generator.next();\n    var highs = input.high;\n    highs.forEach((tickHigh, index) => {\n      var tickInput = {\n        high: tickHigh,\n        low: input.low[index],\n        close: input.close[index]\n      };\n      var result = this.generator.next(tickInput);\n\n      if (result.value != undefined) {\n        this.result.push(result.value);\n      }\n    });\n  }\n\n  nextValue(price) {\n    var result = this.generator.next(price);\n\n    if (result.value != undefined) {\n      return result.value;\n    }\n  }\n\n}\nKeltnerChannels.calculate = keltnerchannels;\nexport function keltnerchannels(input) {\n  Indicator.reverseInputs(input);\n  var result = new KeltnerChannels(input).result;\n\n  if (input.reversedInput) {\n    result.reverse();\n  }\n\n  Indicator.reverseInputs(input);\n  return result;\n}\n;","map":{"version":3,"sources":["/home/andre/Documents/f/f/node_modules/technicalindicators/lib/volatility/KeltnerChannels.js"],"names":["Indicator","IndicatorInput","SMA","EMA","ATR","KeltnerChannelsInput","constructor","arguments","maPeriod","atrPeriod","useSMA","multiplier","KeltnerChannelsOutput","KeltnerChannels","input","maType","maProducer","period","values","format","v","atrProducer","high","low","close","tick","result","generator","ma","nextValue","atr","undefined","middle","upper","lower","next","highs","forEach","tickHigh","index","tickInput","value","push","price","calculate","keltnerchannels","reverseInputs","reversedInput","reverse"],"mappings":"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","sourcesContent":["import { Indicator, IndicatorInput } from '../indicator/indicator';\nimport { SMA } from '../moving_averages/SMA';\nimport { EMA } from '../moving_averages/EMA';\nimport { ATR } from '../directionalmovement/ATR';\nexport class KeltnerChannelsInput extends IndicatorInput {\n    constructor() {\n        super(...arguments);\n        this.maPeriod = 20;\n        this.atrPeriod = 10;\n        this.useSMA = false;\n        this.multiplier = 1;\n    }\n}\nexport class KeltnerChannelsOutput extends IndicatorInput {\n}\n;\nexport class KeltnerChannels extends Indicator {\n    constructor(input) {\n        super(input);\n        var maType = input.useSMA ? SMA : EMA;\n        var maProducer = new maType({ period: input.maPeriod, values: [], format: (v) => { return v; } });\n        var atrProducer = new ATR({ period: input.atrPeriod, high: [], low: [], close: [], format: (v) => { return v; } });\n        var tick;\n        this.result = [];\n        this.generator = (function* () {\n            var KeltnerChannelsOutput;\n            var result;\n            tick = yield;\n            while (true) {\n                var { close } = tick;\n                var ma = maProducer.nextValue(close);\n                var atr = atrProducer.nextValue(tick);\n                if (ma != undefined && atr != undefined) {\n                    result = {\n                        middle: ma,\n                        upper: ma + (input.multiplier * (atr)),\n                        lower: ma - (input.multiplier * (atr))\n                    };\n                }\n                tick = yield result;\n            }\n        })();\n        this.generator.next();\n        var highs = input.high;\n        highs.forEach((tickHigh, index) => {\n            var tickInput = {\n                high: tickHigh,\n                low: input.low[index],\n                close: input.close[index],\n            };\n            var result = this.generator.next(tickInput);\n            if (result.value != undefined) {\n                this.result.push(result.value);\n            }\n        });\n    }\n    ;\n    nextValue(price) {\n        var result = this.generator.next(price);\n        if (result.value != undefined) {\n            return result.value;\n        }\n    }\n    ;\n}\nKeltnerChannels.calculate = keltnerchannels;\nexport function keltnerchannels(input) {\n    Indicator.reverseInputs(input);\n    var result = new KeltnerChannels(input).result;\n    if (input.reversedInput) {\n        result.reverse();\n    }\n    Indicator.reverseInputs(input);\n    return result;\n}\n;\n"]},"metadata":{},"sourceType":"module"}