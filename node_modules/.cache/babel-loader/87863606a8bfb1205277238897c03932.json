{"ast":null,"code":"import { Indicator, IndicatorInput } from '../indicator/indicator';\nexport class VWAPInput extends IndicatorInput {}\n;\nexport class VWAP extends Indicator {\n  constructor(input) {\n    super(input);\n    var lows = input.low;\n    var highs = input.high;\n    var closes = input.close;\n    var volumes = input.volume;\n    var format = this.format;\n\n    if (!(lows.length === highs.length && highs.length === closes.length)) {\n      throw 'Inputs(low,high, close) not of equal size';\n    }\n\n    this.result = [];\n\n    this.generator = function* () {\n      var tick = yield;\n      let cumulativeTotal = 0;\n      let cumulativeVolume = 0;\n\n      while (true) {\n        let typicalPrice = (tick.high + tick.low + tick.close) / 3;\n        let total = tick.volume * typicalPrice;\n        cumulativeTotal = cumulativeTotal + total;\n        cumulativeVolume = cumulativeVolume + tick.volume;\n        tick = yield cumulativeTotal / cumulativeVolume;\n        ;\n      }\n    }();\n\n    this.generator.next();\n    lows.forEach((tick, index) => {\n      var result = this.generator.next({\n        high: highs[index],\n        low: lows[index],\n        close: closes[index],\n        volume: volumes[index]\n      });\n\n      if (result.value != undefined) {\n        this.result.push(result.value);\n      }\n    });\n  }\n\n  nextValue(price) {\n    let result = this.generator.next(price).value;\n\n    if (result != undefined) {\n      return result;\n    }\n  }\n\n}\nVWAP.calculate = vwap;\nexport function vwap(input) {\n  Indicator.reverseInputs(input);\n  var result = new VWAP(input).result;\n\n  if (input.reversedInput) {\n    result.reverse();\n  }\n\n  Indicator.reverseInputs(input);\n  return result;\n}\n;","map":{"version":3,"sources":["/home/andre/ffff/node_modules/technicalindicators/lib/volume/VWAP.js"],"names":["Indicator","IndicatorInput","VWAPInput","VWAP","constructor","input","lows","low","highs","high","closes","close","volumes","volume","format","length","result","generator","tick","cumulativeTotal","cumulativeVolume","typicalPrice","total","next","forEach","index","value","undefined","push","nextValue","price","calculate","vwap","reverseInputs","reversedInput","reverse"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,wBAA1C;AACA,OAAO,MAAMC,SAAN,SAAwBD,cAAxB,CAAuC;AAE9C;AACA,OAAO,MAAME,IAAN,SAAmBH,SAAnB,CAA6B;AAChCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,QAAIC,IAAI,GAAGD,KAAK,CAACE,GAAjB;AACA,QAAIC,KAAK,GAAGH,KAAK,CAACI,IAAlB;AACA,QAAIC,MAAM,GAAGL,KAAK,CAACM,KAAnB;AACA,QAAIC,OAAO,GAAGP,KAAK,CAACQ,MAApB;AACA,QAAIC,MAAM,GAAG,KAAKA,MAAlB;;AACA,QAAI,EAAGR,IAAI,CAACS,MAAL,KAAgBP,KAAK,CAACO,MAAvB,IAAmCP,KAAK,CAACO,MAAN,KAAiBL,MAAM,CAACK,MAA7D,CAAJ,EAA2E;AACvE,YAAO,2CAAP;AACH;;AACD,SAAKC,MAAL,GAAc,EAAd;;AACA,SAAKC,SAAL,GAAkB,aAAa;AAC3B,UAAIC,IAAI,GAAG,KAAX;AACA,UAAIC,eAAe,GAAG,CAAtB;AACA,UAAIC,gBAAgB,GAAG,CAAvB;;AACA,aAAO,IAAP,EAAa;AACT,YAAIC,YAAY,GAAG,CAACH,IAAI,CAACT,IAAL,GAAYS,IAAI,CAACX,GAAjB,GAAuBW,IAAI,CAACP,KAA7B,IAAsC,CAAzD;AACA,YAAIW,KAAK,GAAGJ,IAAI,CAACL,MAAL,GAAcQ,YAA1B;AACAF,QAAAA,eAAe,GAAGA,eAAe,GAAGG,KAApC;AACAF,QAAAA,gBAAgB,GAAGA,gBAAgB,GAAGF,IAAI,CAACL,MAA3C;AACAK,QAAAA,IAAI,GAAG,MAAMC,eAAe,GAAGC,gBAA/B;AACA;AACH;AACJ,KAZgB,EAAjB;;AAaA,SAAKH,SAAL,CAAeM,IAAf;AACAjB,IAAAA,IAAI,CAACkB,OAAL,CAAa,CAACN,IAAD,EAAOO,KAAP,KAAiB;AAC1B,UAAIT,MAAM,GAAG,KAAKC,SAAL,CAAeM,IAAf,CAAoB;AAC7Bd,QAAAA,IAAI,EAAED,KAAK,CAACiB,KAAD,CADkB;AAE7BlB,QAAAA,GAAG,EAAED,IAAI,CAACmB,KAAD,CAFoB;AAG7Bd,QAAAA,KAAK,EAAED,MAAM,CAACe,KAAD,CAHgB;AAI7BZ,QAAAA,MAAM,EAAED,OAAO,CAACa,KAAD;AAJc,OAApB,CAAb;;AAMA,UAAIT,MAAM,CAACU,KAAP,IAAgBC,SAApB,EAA+B;AAC3B,aAAKX,MAAL,CAAYY,IAAZ,CAAiBZ,MAAM,CAACU,KAAxB;AACH;AACJ,KAVD;AAWH;;AAGDG,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,QAAId,MAAM,GAAG,KAAKC,SAAL,CAAeM,IAAf,CAAoBO,KAApB,EAA2BJ,KAAxC;;AACA,QAAIV,MAAM,IAAIW,SAAd,EAAyB;AACrB,aAAOX,MAAP;AACH;AACJ;;AA7C+B;AAgDpCb,IAAI,CAAC4B,SAAL,GAAiBC,IAAjB;AACA,OAAO,SAASA,IAAT,CAAc3B,KAAd,EAAqB;AACxBL,EAAAA,SAAS,CAACiC,aAAV,CAAwB5B,KAAxB;AACA,MAAIW,MAAM,GAAG,IAAIb,IAAJ,CAASE,KAAT,EAAgBW,MAA7B;;AACA,MAAIX,KAAK,CAAC6B,aAAV,EAAyB;AACrBlB,IAAAA,MAAM,CAACmB,OAAP;AACH;;AACDnC,EAAAA,SAAS,CAACiC,aAAV,CAAwB5B,KAAxB;AACA,SAAOW,MAAP;AACH;AACD","sourcesContent":["import { Indicator, IndicatorInput } from '../indicator/indicator';\nexport class VWAPInput extends IndicatorInput {\n}\n;\nexport class VWAP extends Indicator {\n    constructor(input) {\n        super(input);\n        var lows = input.low;\n        var highs = input.high;\n        var closes = input.close;\n        var volumes = input.volume;\n        var format = this.format;\n        if (!((lows.length === highs.length) && (highs.length === closes.length))) {\n            throw ('Inputs(low,high, close) not of equal size');\n        }\n        this.result = [];\n        this.generator = (function* () {\n            var tick = yield;\n            let cumulativeTotal = 0;\n            let cumulativeVolume = 0;\n            while (true) {\n                let typicalPrice = (tick.high + tick.low + tick.close) / 3;\n                let total = tick.volume * typicalPrice;\n                cumulativeTotal = cumulativeTotal + total;\n                cumulativeVolume = cumulativeVolume + tick.volume;\n                tick = yield cumulativeTotal / cumulativeVolume;\n                ;\n            }\n        })();\n        this.generator.next();\n        lows.forEach((tick, index) => {\n            var result = this.generator.next({\n                high: highs[index],\n                low: lows[index],\n                close: closes[index],\n                volume: volumes[index]\n            });\n            if (result.value != undefined) {\n                this.result.push(result.value);\n            }\n        });\n    }\n    ;\n    ;\n    nextValue(price) {\n        let result = this.generator.next(price).value;\n        if (result != undefined) {\n            return result;\n        }\n    }\n    ;\n}\nVWAP.calculate = vwap;\nexport function vwap(input) {\n    Indicator.reverseInputs(input);\n    var result = new VWAP(input).result;\n    if (input.reversedInput) {\n        result.reverse();\n    }\n    Indicator.reverseInputs(input);\n    return result;\n}\n;\n"]},"metadata":{},"sourceType":"module"}