{"ast":null,"code":"import { Indicator, IndicatorInput } from '../indicator/indicator';\nexport class VolumeProfileInput extends IndicatorInput {}\nexport class VolumeProfileOutput {}\nexport function priceFallsBetweenBarRange(low, high, low1, high1) {\n  return low <= low1 && high >= low1 || low1 <= low && high1 >= low;\n}\nexport class VolumeProfile extends Indicator {\n  constructor(input) {\n    super(input);\n    var highs = input.high;\n    var lows = input.low;\n    var closes = input.close;\n    var opens = input.open;\n    var volumes = input.volume;\n    var bars = input.noOfBars;\n\n    if (!(lows.length === highs.length && highs.length === closes.length && highs.length === volumes.length)) {\n      throw 'Inputs(low,high, close, volumes) not of equal size';\n    }\n\n    this.result = [];\n    var max = Math.max(...highs, ...lows, ...closes, ...opens);\n    var min = Math.min(...highs, ...lows, ...closes, ...opens);\n    var barRange = (max - min) / bars;\n    var lastEnd = min;\n\n    for (let i = 0; i < bars; i++) {\n      let rangeStart = lastEnd;\n      let rangeEnd = rangeStart + barRange;\n      lastEnd = rangeEnd;\n      let bullishVolume = 0;\n      let bearishVolume = 0;\n      let totalVolume = 0;\n\n      for (let priceBar = 0; priceBar < highs.length; priceBar++) {\n        let priceBarStart = lows[priceBar];\n        let priceBarEnd = highs[priceBar];\n        let priceBarOpen = opens[priceBar];\n        let priceBarClose = closes[priceBar];\n        let priceBarVolume = volumes[priceBar];\n\n        if (priceFallsBetweenBarRange(rangeStart, rangeEnd, priceBarStart, priceBarEnd)) {\n          totalVolume = totalVolume + priceBarVolume;\n\n          if (priceBarOpen > priceBarClose) {\n            bearishVolume = bearishVolume + priceBarVolume;\n          } else {\n            bullishVolume = bullishVolume + priceBarVolume;\n          }\n        }\n      }\n\n      this.result.push({\n        rangeStart,\n        rangeEnd,\n        bullishVolume,\n        bearishVolume,\n        totalVolume\n      });\n    }\n  }\n\n  nextValue(price) {\n    throw 'Next value not supported for volume profile';\n  }\n\n}\nVolumeProfile.calculate = volumeprofile;\nexport function volumeprofile(input) {\n  Indicator.reverseInputs(input);\n  var result = new VolumeProfile(input).result;\n\n  if (input.reversedInput) {\n    result.reverse();\n  }\n\n  Indicator.reverseInputs(input);\n  return result;\n}\n;","map":{"version":3,"sources":["/home/andre/Downloads/ffff-main/node_modules/technicalindicators/lib/volume/VolumeProfile.js"],"names":["Indicator","IndicatorInput","VolumeProfileInput","VolumeProfileOutput","priceFallsBetweenBarRange","low","high","low1","high1","VolumeProfile","constructor","input","highs","lows","closes","close","opens","open","volumes","volume","bars","noOfBars","length","result","max","Math","min","barRange","lastEnd","i","rangeStart","rangeEnd","bullishVolume","bearishVolume","totalVolume","priceBar","priceBarStart","priceBarEnd","priceBarOpen","priceBarClose","priceBarVolume","push","nextValue","price","calculate","volumeprofile","reverseInputs","reversedInput","reverse"],"mappings":"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","sourcesContent":["import { Indicator, IndicatorInput } from '../indicator/indicator';\nexport class VolumeProfileInput extends IndicatorInput {\n}\nexport class VolumeProfileOutput {\n}\nexport function priceFallsBetweenBarRange(low, high, low1, high1) {\n    return (low <= low1 && high >= low1) || (low1 <= low && high1 >= low);\n}\nexport class VolumeProfile extends Indicator {\n    constructor(input) {\n        super(input);\n        var highs = input.high;\n        var lows = input.low;\n        var closes = input.close;\n        var opens = input.open;\n        var volumes = input.volume;\n        var bars = input.noOfBars;\n        if (!((lows.length === highs.length) && (highs.length === closes.length) && (highs.length === volumes.length))) {\n            throw ('Inputs(low,high, close, volumes) not of equal size');\n        }\n        this.result = [];\n        var max = Math.max(...highs, ...lows, ...closes, ...opens);\n        var min = Math.min(...highs, ...lows, ...closes, ...opens);\n        var barRange = (max - min) / bars;\n        var lastEnd = min;\n        for (let i = 0; i < bars; i++) {\n            let rangeStart = lastEnd;\n            let rangeEnd = rangeStart + barRange;\n            lastEnd = rangeEnd;\n            let bullishVolume = 0;\n            let bearishVolume = 0;\n            let totalVolume = 0;\n            for (let priceBar = 0; priceBar < highs.length; priceBar++) {\n                let priceBarStart = lows[priceBar];\n                let priceBarEnd = highs[priceBar];\n                let priceBarOpen = opens[priceBar];\n                let priceBarClose = closes[priceBar];\n                let priceBarVolume = volumes[priceBar];\n                if (priceFallsBetweenBarRange(rangeStart, rangeEnd, priceBarStart, priceBarEnd)) {\n                    totalVolume = totalVolume + priceBarVolume;\n                    if (priceBarOpen > priceBarClose) {\n                        bearishVolume = bearishVolume + priceBarVolume;\n                    }\n                    else {\n                        bullishVolume = bullishVolume + priceBarVolume;\n                    }\n                }\n            }\n            this.result.push({\n                rangeStart, rangeEnd, bullishVolume, bearishVolume, totalVolume\n            });\n        }\n    }\n    ;\n    nextValue(price) {\n        throw ('Next value not supported for volume profile');\n    }\n    ;\n}\nVolumeProfile.calculate = volumeprofile;\nexport function volumeprofile(input) {\n    Indicator.reverseInputs(input);\n    var result = new VolumeProfile(input).result;\n    if (input.reversedInput) {\n        result.reverse();\n    }\n    Indicator.reverseInputs(input);\n    return result;\n}\n;\n"]},"metadata":{},"sourceType":"module"}