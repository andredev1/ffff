{"ast":null,"code":"import { Indicator, IndicatorInput } from '../indicator/indicator';\nimport LinkedList from '../Utils/FixedSizeLinkedList';\nexport class IchimokuCloudInput extends IndicatorInput {\n  constructor() {\n    super(...arguments);\n    this.conversionPeriod = 9;\n    this.basePeriod = 26;\n    this.spanPeriod = 52;\n    this.displacement = 26;\n  }\n\n}\nexport class IchimokuCloudOutput {}\nexport class IchimokuCloud extends Indicator {\n  constructor(input) {\n    super(input);\n    this.result = [];\n    var defaults = {\n      conversionPeriod: 9,\n      basePeriod: 26,\n      spanPeriod: 52,\n      displacement: 26\n    };\n    var params = Object.assign({}, defaults, input);\n    var currentConversionData = new LinkedList(params.conversionPeriod * 2, true, true, false);\n    var currentBaseData = new LinkedList(params.basePeriod * 2, true, true, false);\n    var currenSpanData = new LinkedList(params.spanPeriod * 2, true, true, false);\n\n    this.generator = function* () {\n      let result;\n      let tick;\n      let period = Math.max(params.conversionPeriod, params.basePeriod, params.spanPeriod, params.displacement);\n      let periodCounter = 1;\n      tick = yield;\n\n      while (true) {\n        // Keep a list of lows/highs for the max period\n        currentConversionData.push(tick.high);\n        currentConversionData.push(tick.low);\n        currentBaseData.push(tick.high);\n        currentBaseData.push(tick.low);\n        currenSpanData.push(tick.high);\n        currenSpanData.push(tick.low);\n\n        if (periodCounter < period) {\n          periodCounter++;\n        } else {\n          // Tenkan-sen (ConversionLine): (9-period high + 9-period low)/2))\n          let conversionLine = (currentConversionData.periodHigh + currentConversionData.periodLow) / 2; // Kijun-sen (Base Line): (26-period high + 26-period low)/2))\n\n          let baseLine = (currentBaseData.periodHigh + currentBaseData.periodLow) / 2; // Senkou Span A (Leading Span A): (Conversion Line + Base Line)/2))\n\n          let spanA = (conversionLine + baseLine) / 2; // Senkou Span B (Leading Span B): (52-period high + 52-period low)/2))\n\n          let spanB = (currenSpanData.periodHigh + currenSpanData.periodLow) / 2; // Senkou Span A / Senkou Span B offset by 26 periods\n          // if(spanCounter < params.displacement) {\n          // \tspanCounter++\n          // } else {\n          // \tspanA = spanAs.shift()\n          // \tspanB = spanBs.shift()\n          // }\n\n          result = {\n            conversion: conversionLine,\n            base: baseLine,\n            spanA: spanA,\n            spanB: spanB\n          };\n        }\n\n        tick = yield result;\n      }\n    }();\n\n    this.generator.next();\n    input.low.forEach((tick, index) => {\n      var result = this.generator.next({\n        high: input.high[index],\n        low: input.low[index]\n      });\n\n      if (result.value) {\n        this.result.push(result.value);\n      }\n    });\n  }\n\n  nextValue(price) {\n    return this.generator.next(price).value;\n  }\n\n}\nIchimokuCloud.calculate = ichimokucloud;\nexport function ichimokucloud(input) {\n  Indicator.reverseInputs(input);\n  var result = new IchimokuCloud(input).result;\n\n  if (input.reversedInput) {\n    result.reverse();\n  }\n\n  Indicator.reverseInputs(input);\n  return result;\n}\n;","map":{"version":3,"sources":["/home/andre/Downloads/ffff-main/node_modules/technicalindicators/lib/ichimoku/IchimokuCloud.js"],"names":["Indicator","IndicatorInput","LinkedList","IchimokuCloudInput","constructor","arguments","conversionPeriod","basePeriod","spanPeriod","displacement","IchimokuCloudOutput","IchimokuCloud","input","result","defaults","params","Object","assign","currentConversionData","currentBaseData","currenSpanData","generator","tick","period","Math","max","periodCounter","push","high","low","conversionLine","periodHigh","periodLow","baseLine","spanA","spanB","conversion","base","next","forEach","index","value","nextValue","price","calculate","ichimokucloud","reverseInputs","reversedInput","reverse"],"mappings":"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","sourcesContent":["import { Indicator, IndicatorInput } from '../indicator/indicator';\nimport LinkedList from '../Utils/FixedSizeLinkedList';\nexport class IchimokuCloudInput extends IndicatorInput {\n    constructor() {\n        super(...arguments);\n        this.conversionPeriod = 9;\n        this.basePeriod = 26;\n        this.spanPeriod = 52;\n        this.displacement = 26;\n    }\n}\nexport class IchimokuCloudOutput {\n}\nexport class IchimokuCloud extends Indicator {\n    constructor(input) {\n        super(input);\n        this.result = [];\n        var defaults = {\n            conversionPeriod: 9,\n            basePeriod: 26,\n            spanPeriod: 52,\n            displacement: 26\n        };\n        var params = Object.assign({}, defaults, input);\n        var currentConversionData = new LinkedList(params.conversionPeriod * 2, true, true, false);\n        var currentBaseData = new LinkedList(params.basePeriod * 2, true, true, false);\n        var currenSpanData = new LinkedList(params.spanPeriod * 2, true, true, false);\n        this.generator = (function* () {\n            let result;\n            let tick;\n            let period = Math.max(params.conversionPeriod, params.basePeriod, params.spanPeriod, params.displacement);\n            let periodCounter = 1;\n            tick = yield;\n            while (true) {\n                // Keep a list of lows/highs for the max period\n                currentConversionData.push(tick.high);\n                currentConversionData.push(tick.low);\n                currentBaseData.push(tick.high);\n                currentBaseData.push(tick.low);\n                currenSpanData.push(tick.high);\n                currenSpanData.push(tick.low);\n                if (periodCounter < period) {\n                    periodCounter++;\n                }\n                else {\n                    // Tenkan-sen (ConversionLine): (9-period high + 9-period low)/2))\n                    let conversionLine = (currentConversionData.periodHigh + currentConversionData.periodLow) / 2;\n                    // Kijun-sen (Base Line): (26-period high + 26-period low)/2))\n                    let baseLine = (currentBaseData.periodHigh + currentBaseData.periodLow) / 2;\n                    // Senkou Span A (Leading Span A): (Conversion Line + Base Line)/2))\n                    let spanA = (conversionLine + baseLine) / 2;\n                    // Senkou Span B (Leading Span B): (52-period high + 52-period low)/2))\n                    let spanB = (currenSpanData.periodHigh + currenSpanData.periodLow) / 2;\n                    // Senkou Span A / Senkou Span B offset by 26 periods\n                    // if(spanCounter < params.displacement) {\n                    // \tspanCounter++\n                    // } else {\n                    // \tspanA = spanAs.shift()\n                    // \tspanB = spanBs.shift()\n                    // }\n                    result = {\n                        conversion: conversionLine,\n                        base: baseLine,\n                        spanA: spanA,\n                        spanB: spanB\n                    };\n                }\n                tick = yield result;\n            }\n        })();\n        this.generator.next();\n        input.low.forEach((tick, index) => {\n            var result = this.generator.next({\n                high: input.high[index],\n                low: input.low[index],\n            });\n            if (result.value) {\n                this.result.push(result.value);\n            }\n        });\n    }\n    nextValue(price) {\n        return this.generator.next(price).value;\n    }\n}\nIchimokuCloud.calculate = ichimokucloud;\nexport function ichimokucloud(input) {\n    Indicator.reverseInputs(input);\n    var result = new IchimokuCloud(input).result;\n    if (input.reversedInput) {\n        result.reverse();\n    }\n    Indicator.reverseInputs(input);\n    return result;\n}\n;\n"]},"metadata":{},"sourceType":"module"}