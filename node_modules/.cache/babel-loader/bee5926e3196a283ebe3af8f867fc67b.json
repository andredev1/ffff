{"ast":null,"code":"import { Indicator } from '../indicator/indicator';\nimport { SMA } from './SMA';\nexport class EMA extends Indicator {\n  constructor(input) {\n    super(input);\n    var period = input.period;\n    var priceArray = input.values;\n    var exponent = 2 / (period + 1);\n    var sma;\n    this.result = [];\n    sma = new SMA({\n      period: period,\n      values: []\n    });\n\n    var genFn = function* () {\n      var tick = yield;\n      var prevEma;\n\n      while (true) {\n        if (prevEma !== undefined && tick !== undefined) {\n          prevEma = (tick - prevEma) * exponent + prevEma;\n          tick = yield prevEma;\n        } else {\n          tick = yield;\n          prevEma = sma.nextValue(tick);\n          if (prevEma) tick = yield prevEma;\n        }\n      }\n    };\n\n    this.generator = genFn();\n    this.generator.next();\n    this.generator.next();\n    priceArray.forEach(tick => {\n      var result = this.generator.next(tick);\n\n      if (result.value != undefined) {\n        this.result.push(this.format(result.value));\n      }\n    });\n  }\n\n  nextValue(price) {\n    var result = this.generator.next(price).value;\n    if (result != undefined) return this.format(result);\n  }\n\n}\nEMA.calculate = ema;\nexport function ema(input) {\n  Indicator.reverseInputs(input);\n  var result = new EMA(input).result;\n\n  if (input.reversedInput) {\n    result.reverse();\n  }\n\n  Indicator.reverseInputs(input);\n  return result;\n}","map":{"version":3,"sources":["/home/andre/ffff/node_modules/technicalindicators/lib/moving_averages/EMA.js"],"names":["Indicator","SMA","EMA","constructor","input","period","priceArray","values","exponent","sma","result","genFn","tick","prevEma","undefined","nextValue","generator","next","forEach","value","push","format","price","calculate","ema","reverseInputs","reversedInput","reverse"],"mappings":"AAAA,SAASA,SAAT,QAA0B,wBAA1B;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,OAAO,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAC/BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,QAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;AACA,QAAIC,UAAU,GAAGF,KAAK,CAACG,MAAvB;AACA,QAAIC,QAAQ,GAAI,KAAKH,MAAM,GAAG,CAAd,CAAhB;AACA,QAAII,GAAJ;AACA,SAAKC,MAAL,GAAc,EAAd;AACAD,IAAAA,GAAG,GAAG,IAAIR,GAAJ,CAAQ;AAAEI,MAAAA,MAAM,EAAEA,MAAV;AAAkBE,MAAAA,MAAM,EAAE;AAA1B,KAAR,CAAN;;AACA,QAAII,KAAK,GAAI,aAAa;AACtB,UAAIC,IAAI,GAAG,KAAX;AACA,UAAIC,OAAJ;;AACA,aAAO,IAAP,EAAa;AACT,YAAIA,OAAO,KAAKC,SAAZ,IAAyBF,IAAI,KAAKE,SAAtC,EAAiD;AAC7CD,UAAAA,OAAO,GAAI,CAACD,IAAI,GAAGC,OAAR,IAAmBL,QAApB,GAAgCK,OAA1C;AACAD,UAAAA,IAAI,GAAG,MAAMC,OAAb;AACH,SAHD,MAIK;AACDD,UAAAA,IAAI,GAAG,KAAP;AACAC,UAAAA,OAAO,GAAGJ,GAAG,CAACM,SAAJ,CAAcH,IAAd,CAAV;AACA,cAAIC,OAAJ,EACID,IAAI,GAAG,MAAMC,OAAb;AACP;AACJ;AACJ,KAfD;;AAgBA,SAAKG,SAAL,GAAiBL,KAAK,EAAtB;AACA,SAAKK,SAAL,CAAeC,IAAf;AACA,SAAKD,SAAL,CAAeC,IAAf;AACAX,IAAAA,UAAU,CAACY,OAAX,CAAoBN,IAAD,IAAU;AACzB,UAAIF,MAAM,GAAG,KAAKM,SAAL,CAAeC,IAAf,CAAoBL,IAApB,CAAb;;AACA,UAAIF,MAAM,CAACS,KAAP,IAAgBL,SAApB,EAA+B;AAC3B,aAAKJ,MAAL,CAAYU,IAAZ,CAAiB,KAAKC,MAAL,CAAYX,MAAM,CAACS,KAAnB,CAAjB;AACH;AACJ,KALD;AAMH;;AACDJ,EAAAA,SAAS,CAACO,KAAD,EAAQ;AACb,QAAIZ,MAAM,GAAG,KAAKM,SAAL,CAAeC,IAAf,CAAoBK,KAApB,EAA2BH,KAAxC;AACA,QAAIT,MAAM,IAAII,SAAd,EACI,OAAO,KAAKO,MAAL,CAAYX,MAAZ,CAAP;AACP;;AAvC8B;AA0CnCR,GAAG,CAACqB,SAAJ,GAAgBC,GAAhB;AACA,OAAO,SAASA,GAAT,CAAapB,KAAb,EAAoB;AACvBJ,EAAAA,SAAS,CAACyB,aAAV,CAAwBrB,KAAxB;AACA,MAAIM,MAAM,GAAG,IAAIR,GAAJ,CAAQE,KAAR,EAAeM,MAA5B;;AACA,MAAIN,KAAK,CAACsB,aAAV,EAAyB;AACrBhB,IAAAA,MAAM,CAACiB,OAAP;AACH;;AACD3B,EAAAA,SAAS,CAACyB,aAAV,CAAwBrB,KAAxB;AACA,SAAOM,MAAP;AACH","sourcesContent":["import { Indicator } from '../indicator/indicator';\nimport { SMA } from './SMA';\nexport class EMA extends Indicator {\n    constructor(input) {\n        super(input);\n        var period = input.period;\n        var priceArray = input.values;\n        var exponent = (2 / (period + 1));\n        var sma;\n        this.result = [];\n        sma = new SMA({ period: period, values: [] });\n        var genFn = (function* () {\n            var tick = yield;\n            var prevEma;\n            while (true) {\n                if (prevEma !== undefined && tick !== undefined) {\n                    prevEma = ((tick - prevEma) * exponent) + prevEma;\n                    tick = yield prevEma;\n                }\n                else {\n                    tick = yield;\n                    prevEma = sma.nextValue(tick);\n                    if (prevEma)\n                        tick = yield prevEma;\n                }\n            }\n        });\n        this.generator = genFn();\n        this.generator.next();\n        this.generator.next();\n        priceArray.forEach((tick) => {\n            var result = this.generator.next(tick);\n            if (result.value != undefined) {\n                this.result.push(this.format(result.value));\n            }\n        });\n    }\n    nextValue(price) {\n        var result = this.generator.next(price).value;\n        if (result != undefined)\n            return this.format(result);\n    }\n    ;\n}\nEMA.calculate = ema;\nexport function ema(input) {\n    Indicator.reverseInputs(input);\n    var result = new EMA(input).result;\n    if (input.reversedInput) {\n        result.reverse();\n    }\n    Indicator.reverseInputs(input);\n    return result;\n}\n"]},"metadata":{},"sourceType":"module"}