{"ast":null,"code":"import { Indicator, IndicatorInput } from '../indicator/indicator';\n/**\n * Created by AAravindan on 5/8/16.\n */\n\n\"use strict\";\n\nexport class MDMInput extends IndicatorInput {}\n;\nexport class MDM extends Indicator {\n  constructor(input) {\n    super(input);\n    var lows = input.low;\n    var highs = input.high;\n    var format = this.format;\n\n    if (lows.length != highs.length) {\n      throw 'Inputs(low,high) not of equal size';\n    }\n\n    this.result = [];\n\n    this.generator = function* () {\n      var minusDm;\n      var current = yield;\n      var last;\n\n      while (true) {\n        if (last) {\n          let upMove = current.high - last.high;\n          let downMove = last.low - current.low;\n          minusDm = format(downMove > upMove && downMove > 0 ? downMove : 0);\n        }\n\n        last = current;\n        current = yield minusDm;\n      }\n    }();\n\n    this.generator.next();\n    lows.forEach((tick, index) => {\n      var result = this.generator.next({\n        high: highs[index],\n        low: lows[index]\n      });\n      if (result.value !== undefined) this.result.push(result.value);\n    });\n  }\n\n  static calculate(input) {\n    Indicator.reverseInputs(input);\n    var result = new MDM(input).result;\n\n    if (input.reversedInput) {\n      result.reverse();\n    }\n\n    Indicator.reverseInputs(input);\n    return result;\n  }\n\n  nextValue(price) {\n    return this.generator.next(price).value;\n  }\n\n}","map":{"version":3,"sources":["/home/andre/Documents/ffff/node_modules/technicalindicators/lib/directionalmovement/MinusDM.js"],"names":["Indicator","IndicatorInput","MDMInput","MDM","constructor","input","lows","low","highs","high","format","length","result","generator","minusDm","current","last","upMove","downMove","next","forEach","tick","index","value","undefined","push","calculate","reverseInputs","reversedInput","reverse","nextValue","price"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,wBAA1C;AACA;AACA;AACA;;AACA;;AACA,OAAO,MAAMC,QAAN,SAAuBD,cAAvB,CAAsC;AAE7C;AACA,OAAO,MAAME,GAAN,SAAkBH,SAAlB,CAA4B;AAC/BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,QAAIC,IAAI,GAAGD,KAAK,CAACE,GAAjB;AACA,QAAIC,KAAK,GAAGH,KAAK,CAACI,IAAlB;AACA,QAAIC,MAAM,GAAG,KAAKA,MAAlB;;AACA,QAAIJ,IAAI,CAACK,MAAL,IAAeH,KAAK,CAACG,MAAzB,EAAiC;AAC7B,YAAO,oCAAP;AACH;;AACD,SAAKC,MAAL,GAAc,EAAd;;AACA,SAAKC,SAAL,GAAkB,aAAa;AAC3B,UAAIC,OAAJ;AACA,UAAIC,OAAO,GAAG,KAAd;AACA,UAAIC,IAAJ;;AACA,aAAO,IAAP,EAAa;AACT,YAAIA,IAAJ,EAAU;AACN,cAAIC,MAAM,GAAIF,OAAO,CAACN,IAAR,GAAeO,IAAI,CAACP,IAAlC;AACA,cAAIS,QAAQ,GAAIF,IAAI,CAACT,GAAL,GAAWQ,OAAO,CAACR,GAAnC;AACAO,UAAAA,OAAO,GAAGJ,MAAM,CAAEQ,QAAQ,GAAGD,MAAX,IAAqBC,QAAQ,GAAG,CAAjC,GAAsCA,QAAtC,GAAiD,CAAlD,CAAhB;AACH;;AACDF,QAAAA,IAAI,GAAGD,OAAP;AACAA,QAAAA,OAAO,GAAG,MAAMD,OAAhB;AACH;AACJ,KAbgB,EAAjB;;AAcA,SAAKD,SAAL,CAAeM,IAAf;AACAb,IAAAA,IAAI,CAACc,OAAL,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC1B,UAAIV,MAAM,GAAG,KAAKC,SAAL,CAAeM,IAAf,CAAoB;AAC7BV,QAAAA,IAAI,EAAED,KAAK,CAACc,KAAD,CADkB;AAE7Bf,QAAAA,GAAG,EAAED,IAAI,CAACgB,KAAD;AAFoB,OAApB,CAAb;AAIA,UAAIV,MAAM,CAACW,KAAP,KAAiBC,SAArB,EACI,KAAKZ,MAAL,CAAYa,IAAZ,CAAiBb,MAAM,CAACW,KAAxB;AACP,KAPD;AAQH;;AAEe,SAATG,SAAS,CAACrB,KAAD,EAAQ;AACpBL,IAAAA,SAAS,CAAC2B,aAAV,CAAwBtB,KAAxB;AACA,QAAIO,MAAM,GAAG,IAAIT,GAAJ,CAAQE,KAAR,EAAeO,MAA5B;;AACA,QAAIP,KAAK,CAACuB,aAAV,EAAyB;AACrBhB,MAAAA,MAAM,CAACiB,OAAP;AACH;;AACD7B,IAAAA,SAAS,CAAC2B,aAAV,CAAwBtB,KAAxB;AACA,WAAOO,MAAP;AACH;;AAEDkB,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,WAAO,KAAKlB,SAAL,CAAeM,IAAf,CAAoBY,KAApB,EAA2BR,KAAlC;AACH;;AA/C8B","sourcesContent":["import { Indicator, IndicatorInput } from '../indicator/indicator';\n/**\n * Created by AAravindan on 5/8/16.\n */\n\"use strict\";\nexport class MDMInput extends IndicatorInput {\n}\n;\nexport class MDM extends Indicator {\n    constructor(input) {\n        super(input);\n        var lows = input.low;\n        var highs = input.high;\n        var format = this.format;\n        if (lows.length != highs.length) {\n            throw ('Inputs(low,high) not of equal size');\n        }\n        this.result = [];\n        this.generator = (function* () {\n            var minusDm;\n            var current = yield;\n            var last;\n            while (true) {\n                if (last) {\n                    let upMove = (current.high - last.high);\n                    let downMove = (last.low - current.low);\n                    minusDm = format((downMove > upMove && downMove > 0) ? downMove : 0);\n                }\n                last = current;\n                current = yield minusDm;\n            }\n        })();\n        this.generator.next();\n        lows.forEach((tick, index) => {\n            var result = this.generator.next({\n                high: highs[index],\n                low: lows[index]\n            });\n            if (result.value !== undefined)\n                this.result.push(result.value);\n        });\n    }\n    ;\n    static calculate(input) {\n        Indicator.reverseInputs(input);\n        var result = new MDM(input).result;\n        if (input.reversedInput) {\n            result.reverse();\n        }\n        Indicator.reverseInputs(input);\n        return result;\n    }\n    ;\n    nextValue(price) {\n        return this.generator.next(price).value;\n    }\n    ;\n}\n"]},"metadata":{},"sourceType":"module"}