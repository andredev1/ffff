{"ast":null,"code":"import CandlestickFinder from './CandlestickFinder';\nexport default class DownsideTasukiGap extends CandlestickFinder {\n  constructor() {\n    super();\n    this.requiredCount = 3;\n    this.name = 'DownsideTasukiGap';\n  }\n\n  logic(data) {\n    let firstdaysOpen = data.open[0];\n    let firstdaysClose = data.close[0];\n    let firstdaysHigh = data.high[0];\n    let firstdaysLow = data.low[0];\n    let seconddaysOpen = data.open[1];\n    let seconddaysClose = data.close[1];\n    let seconddaysHigh = data.high[1];\n    let seconddaysLow = data.low[1];\n    let thirddaysOpen = data.open[2];\n    let thirddaysClose = data.close[2];\n    let thirddaysHigh = data.high[2];\n    let thirddaysLow = data.low[2];\n    let isFirstBearish = firstdaysClose < firstdaysOpen;\n    let isSecondBearish = seconddaysClose < seconddaysOpen;\n    let isThirdBullish = thirddaysClose > thirddaysOpen;\n    let isFirstGapExists = seconddaysHigh < firstdaysLow;\n    let isDownsideTasukiGap = seconddaysOpen > thirddaysOpen && seconddaysClose < thirddaysOpen && thirddaysClose > seconddaysOpen && thirddaysClose < firstdaysClose;\n    return isFirstBearish && isSecondBearish && isThirdBullish && isFirstGapExists && isDownsideTasukiGap;\n  }\n\n}\nexport function downsidetasukigap(data) {\n  return new DownsideTasukiGap().hasPattern(data);\n}","map":{"version":3,"sources":["/home/andre/Documents/f/f/node_modules/technicalindicators/lib/candlestick/DownsideTasukiGap.js"],"names":["CandlestickFinder","DownsideTasukiGap","constructor","requiredCount","name","logic","data","firstdaysOpen","open","firstdaysClose","close","firstdaysHigh","high","firstdaysLow","low","seconddaysOpen","seconddaysClose","seconddaysHigh","seconddaysLow","thirddaysOpen","thirddaysClose","thirddaysHigh","thirddaysLow","isFirstBearish","isSecondBearish","isThirdBullish","isFirstGapExists","isDownsideTasukiGap","downsidetasukigap","hasPattern"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,eAAe,MAAMC,iBAAN,SAAgCD,iBAAhC,CAAkD;AAC7DE,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAKC,IAAL,GAAY,mBAAZ;AACH;;AACDC,EAAAA,KAAK,CAACC,IAAD,EAAO;AACR,QAAIC,aAAa,GAAGD,IAAI,CAACE,IAAL,CAAU,CAAV,CAApB;AACA,QAAIC,cAAc,GAAGH,IAAI,CAACI,KAAL,CAAW,CAAX,CAArB;AACA,QAAIC,aAAa,GAAGL,IAAI,CAACM,IAAL,CAAU,CAAV,CAApB;AACA,QAAIC,YAAY,GAAGP,IAAI,CAACQ,GAAL,CAAS,CAAT,CAAnB;AACA,QAAIC,cAAc,GAAGT,IAAI,CAACE,IAAL,CAAU,CAAV,CAArB;AACA,QAAIQ,eAAe,GAAGV,IAAI,CAACI,KAAL,CAAW,CAAX,CAAtB;AACA,QAAIO,cAAc,GAAGX,IAAI,CAACM,IAAL,CAAU,CAAV,CAArB;AACA,QAAIM,aAAa,GAAGZ,IAAI,CAACQ,GAAL,CAAS,CAAT,CAApB;AACA,QAAIK,aAAa,GAAGb,IAAI,CAACE,IAAL,CAAU,CAAV,CAApB;AACA,QAAIY,cAAc,GAAGd,IAAI,CAACI,KAAL,CAAW,CAAX,CAArB;AACA,QAAIW,aAAa,GAAGf,IAAI,CAACM,IAAL,CAAU,CAAV,CAApB;AACA,QAAIU,YAAY,GAAGhB,IAAI,CAACQ,GAAL,CAAS,CAAT,CAAnB;AACA,QAAIS,cAAc,GAAGd,cAAc,GAAGF,aAAtC;AACA,QAAIiB,eAAe,GAAGR,eAAe,GAAGD,cAAxC;AACA,QAAIU,cAAc,GAAGL,cAAc,GAAGD,aAAtC;AACA,QAAIO,gBAAgB,GAAGT,cAAc,GAAGJ,YAAxC;AACA,QAAIc,mBAAmB,GAAKZ,cAAc,GAAGI,aAAlB,IACtBH,eAAe,GAAGG,aADI,IAEtBC,cAAc,GAAGL,cAFK,IAGtBK,cAAc,GAAGX,cAHtB;AAIA,WAAQc,cAAc,IAAIC,eAAlB,IAAqCC,cAArC,IAAuDC,gBAAvD,IAA2EC,mBAAnF;AACH;;AA5B4D;AA8BjE,OAAO,SAASC,iBAAT,CAA2BtB,IAA3B,EAAiC;AACpC,SAAO,IAAIL,iBAAJ,GAAwB4B,UAAxB,CAAmCvB,IAAnC,CAAP;AACH","sourcesContent":["import CandlestickFinder from './CandlestickFinder';\nexport default class DownsideTasukiGap extends CandlestickFinder {\n    constructor() {\n        super();\n        this.requiredCount = 3;\n        this.name = 'DownsideTasukiGap';\n    }\n    logic(data) {\n        let firstdaysOpen = data.open[0];\n        let firstdaysClose = data.close[0];\n        let firstdaysHigh = data.high[0];\n        let firstdaysLow = data.low[0];\n        let seconddaysOpen = data.open[1];\n        let seconddaysClose = data.close[1];\n        let seconddaysHigh = data.high[1];\n        let seconddaysLow = data.low[1];\n        let thirddaysOpen = data.open[2];\n        let thirddaysClose = data.close[2];\n        let thirddaysHigh = data.high[2];\n        let thirddaysLow = data.low[2];\n        let isFirstBearish = firstdaysClose < firstdaysOpen;\n        let isSecondBearish = seconddaysClose < seconddaysOpen;\n        let isThirdBullish = thirddaysClose > thirddaysOpen;\n        let isFirstGapExists = seconddaysHigh < firstdaysLow;\n        let isDownsideTasukiGap = ((seconddaysOpen > thirddaysOpen) &&\n            (seconddaysClose < thirddaysOpen) &&\n            (thirddaysClose > seconddaysOpen) &&\n            (thirddaysClose < firstdaysClose));\n        return (isFirstBearish && isSecondBearish && isThirdBullish && isFirstGapExists && isDownsideTasukiGap);\n    }\n}\nexport function downsidetasukigap(data) {\n    return new DownsideTasukiGap().hasPattern(data);\n}\n"]},"metadata":{},"sourceType":"module"}