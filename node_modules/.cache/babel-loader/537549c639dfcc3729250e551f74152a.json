{"ast":null,"code":"import CandlestickFinder from './CandlestickFinder';\nimport { averageloss } from '../Utils/AverageLoss';\nimport { averagegain } from '../Utils/AverageGain';\nimport { bearishhammerstick } from './BearishHammerStick';\nimport { bullishhammerstick } from './BullishHammerStick';\nexport default class HangingMan extends CandlestickFinder {\n  constructor() {\n    super();\n    this.name = 'HangingMan';\n    this.requiredCount = 5;\n  }\n\n  logic(data) {\n    let isPattern = this.upwardTrend(data);\n    isPattern = isPattern && this.includesHammer(data);\n    isPattern = isPattern && this.hasConfirmation(data);\n    return isPattern;\n  }\n\n  upwardTrend(data, confirm = true) {\n    let end = confirm ? 3 : 4; // Analyze trends in closing prices of the first three or four candlesticks\n\n    let gains = averagegain({\n      values: data.close.slice(0, end),\n      period: end - 1\n    });\n    let losses = averageloss({\n      values: data.close.slice(0, end),\n      period: end - 1\n    }); // Upward trend, so more gains than losses\n\n    return gains > losses;\n  }\n\n  includesHammer(data, confirm = true) {\n    let start = confirm ? 3 : 4;\n    let end = confirm ? 4 : undefined;\n    let possibleHammerData = {\n      open: data.open.slice(start, end),\n      close: data.close.slice(start, end),\n      low: data.low.slice(start, end),\n      high: data.high.slice(start, end)\n    };\n    let isPattern = bearishhammerstick(possibleHammerData);\n    isPattern = isPattern || bullishhammerstick(possibleHammerData);\n    return isPattern;\n  }\n\n  hasConfirmation(data) {\n    let possibleHammer = {\n      open: data.open[3],\n      close: data.close[3],\n      low: data.low[3],\n      high: data.high[3]\n    };\n    let possibleConfirmation = {\n      open: data.open[4],\n      close: data.close[4],\n      low: data.low[4],\n      high: data.high[4]\n    }; // Confirmation candlestick is bearish\n\n    let isPattern = possibleConfirmation.open > possibleConfirmation.close;\n    return isPattern && possibleHammer.close > possibleConfirmation.close;\n  }\n\n}\nexport function hangingman(data) {\n  return new HangingMan().hasPattern(data);\n}","map":{"version":3,"sources":["/home/andre/Documents/ffff/node_modules/technicalindicators/lib/candlestick/HangingMan.js"],"names":["CandlestickFinder","averageloss","averagegain","bearishhammerstick","bullishhammerstick","HangingMan","constructor","name","requiredCount","logic","data","isPattern","upwardTrend","includesHammer","hasConfirmation","confirm","end","gains","values","close","slice","period","losses","start","undefined","possibleHammerData","open","low","high","possibleHammer","possibleConfirmation","hangingman","hasPattern"],"mappings":"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","sourcesContent":["import CandlestickFinder from './CandlestickFinder';\nimport { averageloss } from '../Utils/AverageLoss';\nimport { averagegain } from '../Utils/AverageGain';\nimport { bearishhammerstick } from './BearishHammerStick';\nimport { bullishhammerstick } from './BullishHammerStick';\nexport default class HangingMan extends CandlestickFinder {\n    constructor() {\n        super();\n        this.name = 'HangingMan';\n        this.requiredCount = 5;\n    }\n    logic(data) {\n        let isPattern = this.upwardTrend(data);\n        isPattern = isPattern && this.includesHammer(data);\n        isPattern = isPattern && this.hasConfirmation(data);\n        return isPattern;\n    }\n    upwardTrend(data, confirm = true) {\n        let end = confirm ? 3 : 4;\n        // Analyze trends in closing prices of the first three or four candlesticks\n        let gains = averagegain({ values: data.close.slice(0, end), period: end - 1 });\n        let losses = averageloss({ values: data.close.slice(0, end), period: end - 1 });\n        // Upward trend, so more gains than losses\n        return gains > losses;\n    }\n    includesHammer(data, confirm = true) {\n        let start = confirm ? 3 : 4;\n        let end = confirm ? 4 : undefined;\n        let possibleHammerData = {\n            open: data.open.slice(start, end),\n            close: data.close.slice(start, end),\n            low: data.low.slice(start, end),\n            high: data.high.slice(start, end),\n        };\n        let isPattern = bearishhammerstick(possibleHammerData);\n        isPattern = isPattern || bullishhammerstick(possibleHammerData);\n        return isPattern;\n    }\n    hasConfirmation(data) {\n        let possibleHammer = {\n            open: data.open[3],\n            close: data.close[3],\n            low: data.low[3],\n            high: data.high[3],\n        };\n        let possibleConfirmation = {\n            open: data.open[4],\n            close: data.close[4],\n            low: data.low[4],\n            high: data.high[4],\n        };\n        // Confirmation candlestick is bearish\n        let isPattern = possibleConfirmation.open > possibleConfirmation.close;\n        return isPattern && possibleHammer.close > possibleConfirmation.close;\n    }\n}\nexport function hangingman(data) {\n    return new HangingMan().hasPattern(data);\n}\n"]},"metadata":{},"sourceType":"module"}