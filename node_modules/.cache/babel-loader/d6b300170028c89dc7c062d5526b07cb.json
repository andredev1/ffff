{"ast":null,"code":"import { IndicatorInput, Indicator } from '../indicator/indicator';\nimport { SMA } from '../moving_averages/SMA';\nimport LinkedList from '../Utils/FixedSizeLinkedList';\n/**\n * Created by AAravindan on 5/7/16.\n */\n\n\"use strict\";\n\nexport class SDInput extends IndicatorInput {}\n;\nexport class SD extends Indicator {\n  constructor(input) {\n    super(input);\n    var period = input.period;\n    var priceArray = input.values;\n    var sma = new SMA({\n      period: period,\n      values: [],\n      format: v => {\n        return v;\n      }\n    });\n    this.result = [];\n\n    this.generator = function* () {\n      var tick;\n      var mean;\n      var currentSet = new LinkedList(period);\n      ;\n      tick = yield;\n      var sd;\n\n      while (true) {\n        currentSet.push(tick);\n        mean = sma.nextValue(tick);\n\n        if (mean) {\n          let sum = 0;\n\n          for (let x of currentSet.iterator()) {\n            sum = sum + Math.pow(x - mean, 2);\n          }\n\n          sd = Math.sqrt(sum / period);\n        }\n\n        tick = yield sd;\n      }\n    }();\n\n    this.generator.next();\n    priceArray.forEach(tick => {\n      var result = this.generator.next(tick);\n\n      if (result.value != undefined) {\n        this.result.push(this.format(result.value));\n      }\n    });\n  }\n\n  nextValue(price) {\n    var nextResult = this.generator.next(price);\n    if (nextResult.value != undefined) return this.format(nextResult.value);\n  }\n\n}\nSD.calculate = sd;\nexport function sd(input) {\n  Indicator.reverseInputs(input);\n  var result = new SD(input).result;\n\n  if (input.reversedInput) {\n    result.reverse();\n  }\n\n  Indicator.reverseInputs(input);\n  return result;\n}\n;","map":{"version":3,"sources":["/home/andre/ffff/node_modules/technicalindicators/lib/Utils/SD.js"],"names":["IndicatorInput","Indicator","SMA","LinkedList","SDInput","SD","constructor","input","period","priceArray","values","sma","format","v","result","generator","tick","mean","currentSet","sd","push","nextValue","sum","x","iterator","Math","pow","sqrt","next","forEach","value","undefined","price","nextResult","calculate","reverseInputs","reversedInput","reverse"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,SAAzB,QAA0C,wBAA1C;AACA,SAASC,GAAT,QAAoB,wBAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA;AACA;AACA;;AACA;;AACA,OAAO,MAAMC,OAAN,SAAsBJ,cAAtB,CAAqC;AAE5C;AACA,OAAO,MAAMK,EAAN,SAAiBJ,SAAjB,CAA2B;AAC9BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,QAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;AACA,QAAIC,UAAU,GAAGF,KAAK,CAACG,MAAvB;AACA,QAAIC,GAAG,GAAG,IAAIT,GAAJ,CAAQ;AAAEM,MAAAA,MAAM,EAAEA,MAAV;AAAkBE,MAAAA,MAAM,EAAE,EAA1B;AAA8BE,MAAAA,MAAM,EAAGC,CAAD,IAAO;AAAE,eAAOA,CAAP;AAAW;AAA1D,KAAR,CAAV;AACA,SAAKC,MAAL,GAAc,EAAd;;AACA,SAAKC,SAAL,GAAkB,aAAa;AAC3B,UAAIC,IAAJ;AACA,UAAIC,IAAJ;AACA,UAAIC,UAAU,GAAG,IAAIf,UAAJ,CAAeK,MAAf,CAAjB;AACA;AACAQ,MAAAA,IAAI,GAAG,KAAP;AACA,UAAIG,EAAJ;;AACA,aAAO,IAAP,EAAa;AACTD,QAAAA,UAAU,CAACE,IAAX,CAAgBJ,IAAhB;AACAC,QAAAA,IAAI,GAAGN,GAAG,CAACU,SAAJ,CAAcL,IAAd,CAAP;;AACA,YAAIC,IAAJ,EAAU;AACN,cAAIK,GAAG,GAAG,CAAV;;AACA,eAAK,IAAIC,CAAT,IAAcL,UAAU,CAACM,QAAX,EAAd,EAAqC;AACjCF,YAAAA,GAAG,GAAGA,GAAG,GAAIG,IAAI,CAACC,GAAL,CAAUH,CAAC,GAAGN,IAAd,EAAqB,CAArB,CAAb;AACH;;AACDE,UAAAA,EAAE,GAAGM,IAAI,CAACE,IAAL,CAAUL,GAAG,GAAId,MAAjB,CAAL;AACH;;AACDQ,QAAAA,IAAI,GAAG,MAAMG,EAAb;AACH;AACJ,KAnBgB,EAAjB;;AAoBA,SAAKJ,SAAL,CAAea,IAAf;AACAnB,IAAAA,UAAU,CAACoB,OAAX,CAAoBb,IAAD,IAAU;AACzB,UAAIF,MAAM,GAAG,KAAKC,SAAL,CAAea,IAAf,CAAoBZ,IAApB,CAAb;;AACA,UAAIF,MAAM,CAACgB,KAAP,IAAgBC,SAApB,EAA+B;AAC3B,aAAKjB,MAAL,CAAYM,IAAZ,CAAiB,KAAKR,MAAL,CAAYE,MAAM,CAACgB,KAAnB,CAAjB;AACH;AACJ,KALD;AAMH;;AACDT,EAAAA,SAAS,CAACW,KAAD,EAAQ;AACb,QAAIC,UAAU,GAAG,KAAKlB,SAAL,CAAea,IAAf,CAAoBI,KAApB,CAAjB;AACA,QAAIC,UAAU,CAACH,KAAX,IAAoBC,SAAxB,EACI,OAAO,KAAKnB,MAAL,CAAYqB,UAAU,CAACH,KAAvB,CAAP;AACP;;AAvC6B;AA0ClCzB,EAAE,CAAC6B,SAAH,GAAef,EAAf;AACA,OAAO,SAASA,EAAT,CAAYZ,KAAZ,EAAmB;AACtBN,EAAAA,SAAS,CAACkC,aAAV,CAAwB5B,KAAxB;AACA,MAAIO,MAAM,GAAG,IAAIT,EAAJ,CAAOE,KAAP,EAAcO,MAA3B;;AACA,MAAIP,KAAK,CAAC6B,aAAV,EAAyB;AACrBtB,IAAAA,MAAM,CAACuB,OAAP;AACH;;AACDpC,EAAAA,SAAS,CAACkC,aAAV,CAAwB5B,KAAxB;AACA,SAAOO,MAAP;AACH;AACD","sourcesContent":["import { IndicatorInput, Indicator } from '../indicator/indicator';\nimport { SMA } from '../moving_averages/SMA';\nimport LinkedList from '../Utils/FixedSizeLinkedList';\n/**\n * Created by AAravindan on 5/7/16.\n */\n\"use strict\";\nexport class SDInput extends IndicatorInput {\n}\n;\nexport class SD extends Indicator {\n    constructor(input) {\n        super(input);\n        var period = input.period;\n        var priceArray = input.values;\n        var sma = new SMA({ period: period, values: [], format: (v) => { return v; } });\n        this.result = [];\n        this.generator = (function* () {\n            var tick;\n            var mean;\n            var currentSet = new LinkedList(period);\n            ;\n            tick = yield;\n            var sd;\n            while (true) {\n                currentSet.push(tick);\n                mean = sma.nextValue(tick);\n                if (mean) {\n                    let sum = 0;\n                    for (let x of currentSet.iterator()) {\n                        sum = sum + (Math.pow((x - mean), 2));\n                    }\n                    sd = Math.sqrt(sum / (period));\n                }\n                tick = yield sd;\n            }\n        })();\n        this.generator.next();\n        priceArray.forEach((tick) => {\n            var result = this.generator.next(tick);\n            if (result.value != undefined) {\n                this.result.push(this.format(result.value));\n            }\n        });\n    }\n    nextValue(price) {\n        var nextResult = this.generator.next(price);\n        if (nextResult.value != undefined)\n            return this.format(nextResult.value);\n    }\n    ;\n}\nSD.calculate = sd;\nexport function sd(input) {\n    Indicator.reverseInputs(input);\n    var result = new SD(input).result;\n    if (input.reversedInput) {\n        result.reverse();\n    }\n    Indicator.reverseInputs(input);\n    return result;\n}\n;\n"]},"metadata":{},"sourceType":"module"}