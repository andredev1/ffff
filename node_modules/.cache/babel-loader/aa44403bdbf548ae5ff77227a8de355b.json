{"ast":null,"code":"import { Indicator } from '../indicator/indicator';\nimport { LinkedList } from '../Utils/LinkedList'; //STEP3. Add class based syntax with export\n\nexport class WilderSmoothing extends Indicator {\n  constructor(input) {\n    super(input);\n    this.period = input.period;\n    this.price = input.values;\n\n    var genFn = function* (period) {\n      var list = new LinkedList();\n      var sum = 0;\n      var counter = 1;\n      var current = yield;\n      var result = 0;\n\n      while (true) {\n        if (counter < period) {\n          counter++;\n          sum = sum + current;\n          result = undefined;\n        } else if (counter == period) {\n          counter++;\n          sum = sum + current;\n          result = sum;\n        } else {\n          result = result - result / period + current;\n        }\n\n        current = yield result;\n      }\n    };\n\n    this.generator = genFn(this.period);\n    this.generator.next();\n    this.result = [];\n    this.price.forEach(tick => {\n      var result = this.generator.next(tick);\n\n      if (result.value != undefined) {\n        this.result.push(this.format(result.value));\n      }\n    });\n  }\n\n  nextValue(price) {\n    var result = this.generator.next(price).value;\n    if (result != undefined) return this.format(result);\n  }\n\n}\nWilderSmoothing.calculate = wildersmoothing;\nexport function wildersmoothing(input) {\n  Indicator.reverseInputs(input);\n  var result = new WilderSmoothing(input).result;\n\n  if (input.reversedInput) {\n    result.reverse();\n  }\n\n  Indicator.reverseInputs(input);\n  return result;\n}\n; //STEP 6. Run the tests","map":{"version":3,"sources":["/home/andre/Documents/ffff/node_modules/technicalindicators/lib/moving_averages/WilderSmoothing.js"],"names":["Indicator","LinkedList","WilderSmoothing","constructor","input","period","price","values","genFn","list","sum","counter","current","result","undefined","generator","next","forEach","tick","value","push","format","nextValue","calculate","wildersmoothing","reverseInputs","reversedInput","reverse"],"mappings":"AAAA,SAASA,SAAT,QAA0B,wBAA1B;AACA,SAASC,UAAT,QAA2B,qBAA3B,C,CACA;;AACA,OAAO,MAAMC,eAAN,SAA8BF,SAA9B,CAAwC;AAC3CG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAcD,KAAK,CAACC,MAApB;AACA,SAAKC,KAAL,GAAaF,KAAK,CAACG,MAAnB;;AACA,QAAIC,KAAK,GAAI,WAAWH,MAAX,EAAmB;AAC5B,UAAII,IAAI,GAAG,IAAIR,UAAJ,EAAX;AACA,UAAIS,GAAG,GAAG,CAAV;AACA,UAAIC,OAAO,GAAG,CAAd;AACA,UAAIC,OAAO,GAAG,KAAd;AACA,UAAIC,MAAM,GAAG,CAAb;;AACA,aAAO,IAAP,EAAa;AACT,YAAIF,OAAO,GAAGN,MAAd,EAAsB;AAClBM,UAAAA,OAAO;AACPD,UAAAA,GAAG,GAAGA,GAAG,GAAGE,OAAZ;AACAC,UAAAA,MAAM,GAAGC,SAAT;AACH,SAJD,MAKK,IAAIH,OAAO,IAAIN,MAAf,EAAuB;AACxBM,UAAAA,OAAO;AACPD,UAAAA,GAAG,GAAGA,GAAG,GAAGE,OAAZ;AACAC,UAAAA,MAAM,GAAGH,GAAT;AACH,SAJI,MAKA;AACDG,UAAAA,MAAM,GAAGA,MAAM,GAAIA,MAAM,GAAGR,MAAnB,GAA6BO,OAAtC;AACH;;AACDA,QAAAA,OAAO,GAAG,MAAMC,MAAhB;AACH;AACJ,KAtBD;;AAuBA,SAAKE,SAAL,GAAiBP,KAAK,CAAC,KAAKH,MAAN,CAAtB;AACA,SAAKU,SAAL,CAAeC,IAAf;AACA,SAAKH,MAAL,GAAc,EAAd;AACA,SAAKP,KAAL,CAAWW,OAAX,CAAoBC,IAAD,IAAU;AACzB,UAAIL,MAAM,GAAG,KAAKE,SAAL,CAAeC,IAAf,CAAoBE,IAApB,CAAb;;AACA,UAAIL,MAAM,CAACM,KAAP,IAAgBL,SAApB,EAA+B;AAC3B,aAAKD,MAAL,CAAYO,IAAZ,CAAiB,KAAKC,MAAL,CAAYR,MAAM,CAACM,KAAnB,CAAjB;AACH;AACJ,KALD;AAMH;;AACDG,EAAAA,SAAS,CAAChB,KAAD,EAAQ;AACb,QAAIO,MAAM,GAAG,KAAKE,SAAL,CAAeC,IAAf,CAAoBV,KAApB,EAA2Ba,KAAxC;AACA,QAAIN,MAAM,IAAIC,SAAd,EACI,OAAO,KAAKO,MAAL,CAAYR,MAAZ,CAAP;AACP;;AA1C0C;AA6C/CX,eAAe,CAACqB,SAAhB,GAA4BC,eAA5B;AACA,OAAO,SAASA,eAAT,CAAyBpB,KAAzB,EAAgC;AACnCJ,EAAAA,SAAS,CAACyB,aAAV,CAAwBrB,KAAxB;AACA,MAAIS,MAAM,GAAG,IAAIX,eAAJ,CAAoBE,KAApB,EAA2BS,MAAxC;;AACA,MAAIT,KAAK,CAACsB,aAAV,EAAyB;AACrBb,IAAAA,MAAM,CAACc,OAAP;AACH;;AACD3B,EAAAA,SAAS,CAACyB,aAAV,CAAwBrB,KAAxB;AACA,SAAOS,MAAP;AACH;AACD,C,CACA","sourcesContent":["import { Indicator } from '../indicator/indicator';\nimport { LinkedList } from '../Utils/LinkedList';\n//STEP3. Add class based syntax with export\nexport class WilderSmoothing extends Indicator {\n    constructor(input) {\n        super(input);\n        this.period = input.period;\n        this.price = input.values;\n        var genFn = (function* (period) {\n            var list = new LinkedList();\n            var sum = 0;\n            var counter = 1;\n            var current = yield;\n            var result = 0;\n            while (true) {\n                if (counter < period) {\n                    counter++;\n                    sum = sum + current;\n                    result = undefined;\n                }\n                else if (counter == period) {\n                    counter++;\n                    sum = sum + current;\n                    result = sum;\n                }\n                else {\n                    result = result - (result / period) + current;\n                }\n                current = yield result;\n            }\n        });\n        this.generator = genFn(this.period);\n        this.generator.next();\n        this.result = [];\n        this.price.forEach((tick) => {\n            var result = this.generator.next(tick);\n            if (result.value != undefined) {\n                this.result.push(this.format(result.value));\n            }\n        });\n    }\n    nextValue(price) {\n        var result = this.generator.next(price).value;\n        if (result != undefined)\n            return this.format(result);\n    }\n    ;\n}\nWilderSmoothing.calculate = wildersmoothing;\nexport function wildersmoothing(input) {\n    Indicator.reverseInputs(input);\n    var result = new WilderSmoothing(input).result;\n    if (input.reversedInput) {\n        result.reverse();\n    }\n    Indicator.reverseInputs(input);\n    return result;\n}\n;\n//STEP 6. Run the tests\n"]},"metadata":{},"sourceType":"module"}