{"ast":null,"code":"import { IndicatorInput, Indicator } from '../indicator/indicator';\n/**\n * Created by AAravindan on 5/10/16.\n */\n\n\"use strict\";\n\nimport { SMA } from '../moving_averages/SMA';\nimport { RSI } from '../oscillators/RSI';\nimport { Stochastic } from '../momentum/Stochastic';\nexport class StochasticRsiInput extends IndicatorInput {}\n;\nexport class StochasticRSIOutput {}\n;\nexport class StochasticRSI extends Indicator {\n  constructor(input) {\n    super(input);\n    let closes = input.values;\n    let rsiPeriod = input.rsiPeriod;\n    let stochasticPeriod = input.stochasticPeriod;\n    let kPeriod = input.kPeriod;\n    let dPeriod = input.dPeriod;\n    let format = this.format;\n    this.result = [];\n\n    this.generator = function* () {\n      let index = 1;\n      let rsi = new RSI({\n        period: rsiPeriod,\n        values: []\n      });\n      let stochastic = new Stochastic({\n        period: stochasticPeriod,\n        high: [],\n        low: [],\n        close: [],\n        signalPeriod: kPeriod\n      });\n      let dSma = new SMA({\n        period: dPeriod,\n        values: [],\n        format: v => {\n          return v;\n        }\n      });\n      let lastRSI, stochasticRSI, d, result;\n      var tick = yield;\n\n      while (true) {\n        lastRSI = rsi.nextValue(tick);\n\n        if (lastRSI !== undefined) {\n          var stochasticInput = {\n            high: lastRSI,\n            low: lastRSI,\n            close: lastRSI\n          };\n          stochasticRSI = stochastic.nextValue(stochasticInput);\n\n          if (stochasticRSI !== undefined && stochasticRSI.d !== undefined) {\n            d = dSma.nextValue(stochasticRSI.d);\n            if (d !== undefined) result = {\n              stochRSI: stochasticRSI.k,\n              k: stochasticRSI.d,\n              d: d\n            };\n          }\n        }\n\n        tick = yield result;\n      }\n    }();\n\n    this.generator.next();\n    closes.forEach((tick, index) => {\n      var result = this.generator.next(tick);\n\n      if (result.value !== undefined) {\n        this.result.push(result.value);\n      }\n    });\n  }\n\n  nextValue(input) {\n    let nextResult = this.generator.next(input);\n    if (nextResult.value !== undefined) return nextResult.value;\n  }\n\n}\nStochasticRSI.calculate = stochasticrsi;\nexport function stochasticrsi(input) {\n  Indicator.reverseInputs(input);\n  var result = new StochasticRSI(input).result;\n\n  if (input.reversedInput) {\n    result.reverse();\n  }\n\n  Indicator.reverseInputs(input);\n  return result;\n}\n;","map":{"version":3,"sources":["/home/andre/Documents/ffff/node_modules/technicalindicators/lib/momentum/StochasticRSI.js"],"names":["IndicatorInput","Indicator","SMA","RSI","Stochastic","StochasticRsiInput","StochasticRSIOutput","StochasticRSI","constructor","input","closes","values","rsiPeriod","stochasticPeriod","kPeriod","dPeriod","format","result","generator","index","rsi","period","stochastic","high","low","close","signalPeriod","dSma","v","lastRSI","stochasticRSI","d","tick","nextValue","undefined","stochasticInput","stochRSI","k","next","forEach","value","push","nextResult","calculate","stochasticrsi","reverseInputs","reversedInput","reverse"],"mappings":"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","sourcesContent":["import { IndicatorInput, Indicator } from '../indicator/indicator';\n/**\n * Created by AAravindan on 5/10/16.\n */\n\"use strict\";\nimport { SMA } from '../moving_averages/SMA';\nimport { RSI } from '../oscillators/RSI';\nimport { Stochastic } from '../momentum/Stochastic';\nexport class StochasticRsiInput extends IndicatorInput {\n}\n;\nexport class StochasticRSIOutput {\n}\n;\nexport class StochasticRSI extends Indicator {\n    constructor(input) {\n        super(input);\n        let closes = input.values;\n        let rsiPeriod = input.rsiPeriod;\n        let stochasticPeriod = input.stochasticPeriod;\n        let kPeriod = input.kPeriod;\n        let dPeriod = input.dPeriod;\n        let format = this.format;\n        this.result = [];\n        this.generator = (function* () {\n            let index = 1;\n            let rsi = new RSI({ period: rsiPeriod, values: [] });\n            let stochastic = new Stochastic({ period: stochasticPeriod, high: [], low: [], close: [], signalPeriod: kPeriod });\n            let dSma = new SMA({\n                period: dPeriod,\n                values: [],\n                format: (v) => { return v; }\n            });\n            let lastRSI, stochasticRSI, d, result;\n            var tick = yield;\n            while (true) {\n                lastRSI = rsi.nextValue(tick);\n                if (lastRSI !== undefined) {\n                    var stochasticInput = { high: lastRSI, low: lastRSI, close: lastRSI };\n                    stochasticRSI = stochastic.nextValue(stochasticInput);\n                    if (stochasticRSI !== undefined && stochasticRSI.d !== undefined) {\n                        d = dSma.nextValue(stochasticRSI.d);\n                        if (d !== undefined)\n                            result = {\n                                stochRSI: stochasticRSI.k,\n                                k: stochasticRSI.d,\n                                d: d\n                            };\n                    }\n                }\n                tick = yield result;\n            }\n        })();\n        this.generator.next();\n        closes.forEach((tick, index) => {\n            var result = this.generator.next(tick);\n            if (result.value !== undefined) {\n                this.result.push(result.value);\n            }\n        });\n    }\n    ;\n    nextValue(input) {\n        let nextResult = this.generator.next(input);\n        if (nextResult.value !== undefined)\n            return nextResult.value;\n    }\n    ;\n}\nStochasticRSI.calculate = stochasticrsi;\nexport function stochasticrsi(input) {\n    Indicator.reverseInputs(input);\n    var result = new StochasticRSI(input).result;\n    if (input.reversedInput) {\n        result.reverse();\n    }\n    Indicator.reverseInputs(input);\n    return result;\n}\n;\n"]},"metadata":{},"sourceType":"module"}