{"ast":null,"code":"import { WilderSmoothing } from '../moving_averages/WilderSmoothing';\nimport { Indicator, IndicatorInput } from '../indicator/indicator';\nimport { MDM } from './MinusDM';\nimport { PDM } from './PlusDM';\nimport { TrueRange } from './TrueRange';\nimport { WEMA } from '../moving_averages/WEMA';\nexport class ADXInput extends IndicatorInput {}\n;\nexport class ADXOutput extends IndicatorInput {}\n;\nexport class ADX extends Indicator {\n  constructor(input) {\n    super(input);\n    var lows = input.low;\n    var highs = input.high;\n    var closes = input.close;\n    var period = input.period;\n    var format = this.format;\n    var plusDM = new PDM({\n      high: [],\n      low: []\n    });\n    var minusDM = new MDM({\n      high: [],\n      low: []\n    });\n    var emaPDM = new WilderSmoothing({\n      period: period,\n      values: [],\n      format: v => {\n        return v;\n      }\n    });\n    var emaMDM = new WilderSmoothing({\n      period: period,\n      values: [],\n      format: v => {\n        return v;\n      }\n    });\n    var emaTR = new WilderSmoothing({\n      period: period,\n      values: [],\n      format: v => {\n        return v;\n      }\n    });\n    var emaDX = new WEMA({\n      period: period,\n      values: [],\n      format: v => {\n        return v;\n      }\n    });\n    var tr = new TrueRange({\n      low: [],\n      high: [],\n      close: []\n    });\n\n    if (!(lows.length === highs.length && highs.length === closes.length)) {\n      throw 'Inputs(low,high, close) not of equal size';\n    }\n\n    this.result = [];\n    ADXOutput;\n\n    this.generator = function* () {\n      var tick = yield;\n      var index = 0;\n      var lastATR, lastAPDM, lastAMDM, lastPDI, lastMDI, lastDX, smoothedDX;\n      lastATR = 0;\n      lastAPDM = 0;\n      lastAMDM = 0;\n\n      while (true) {\n        let calcTr = tr.nextValue(tick);\n        let calcPDM = plusDM.nextValue(tick);\n        let calcMDM = minusDM.nextValue(tick);\n\n        if (calcTr === undefined) {\n          tick = yield;\n          continue;\n        }\n\n        let lastATR = emaTR.nextValue(calcTr);\n        let lastAPDM = emaPDM.nextValue(calcPDM);\n        let lastAMDM = emaMDM.nextValue(calcMDM);\n\n        if (lastATR != undefined && lastAPDM != undefined && lastAMDM != undefined) {\n          lastPDI = lastAPDM * 100 / lastATR;\n          lastMDI = lastAMDM * 100 / lastATR;\n          let diDiff = Math.abs(lastPDI - lastMDI);\n          let diSum = lastPDI + lastMDI;\n          lastDX = diDiff / diSum * 100;\n          smoothedDX = emaDX.nextValue(lastDX); // console.log(tick.high.toFixed(2), tick.low.toFixed(2), tick.close.toFixed(2) , calcTr.toFixed(2), calcPDM.toFixed(2), calcMDM.toFixed(2), lastATR.toFixed(2), lastAPDM.toFixed(2), lastAMDM.toFixed(2), lastPDI.toFixed(2), lastMDI.toFixed(2), diDiff.toFixed(2), diSum.toFixed(2), lastDX.toFixed(2));\n        }\n\n        tick = yield {\n          adx: smoothedDX,\n          pdi: lastPDI,\n          mdi: lastMDI\n        };\n      }\n    }();\n\n    this.generator.next();\n    lows.forEach((tick, index) => {\n      var result = this.generator.next({\n        high: highs[index],\n        low: lows[index],\n        close: closes[index]\n      });\n\n      if (result.value != undefined && result.value.adx != undefined) {\n        this.result.push({\n          adx: format(result.value.adx),\n          pdi: format(result.value.pdi),\n          mdi: format(result.value.mdi)\n        });\n      }\n    });\n  }\n\n  nextValue(price) {\n    let result = this.generator.next(price).value;\n\n    if (result != undefined && result.adx != undefined) {\n      return {\n        adx: this.format(result.adx),\n        pdi: this.format(result.pdi),\n        mdi: this.format(result.mdi)\n      };\n    }\n  }\n\n}\nADX.calculate = adx;\nexport function adx(input) {\n  Indicator.reverseInputs(input);\n  var result = new ADX(input).result;\n\n  if (input.reversedInput) {\n    result.reverse();\n  }\n\n  Indicator.reverseInputs(input);\n  return result;\n}\n;","map":{"version":3,"sources":["/home/andre/Downloads/ffff-main/node_modules/technicalindicators/lib/directionalmovement/ADX.js"],"names":["WilderSmoothing","Indicator","IndicatorInput","MDM","PDM","TrueRange","WEMA","ADXInput","ADXOutput","ADX","constructor","input","lows","low","highs","high","closes","close","period","format","plusDM","minusDM","emaPDM","values","v","emaMDM","emaTR","emaDX","tr","length","result","generator","tick","index","lastATR","lastAPDM","lastAMDM","lastPDI","lastMDI","lastDX","smoothedDX","calcTr","nextValue","calcPDM","calcMDM","undefined","diDiff","Math","abs","diSum","adx","pdi","mdi","next","forEach","value","push","price","calculate","reverseInputs","reversedInput","reverse"],"mappings":"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","sourcesContent":["import { WilderSmoothing } from '../moving_averages/WilderSmoothing';\nimport { Indicator, IndicatorInput } from '../indicator/indicator';\nimport { MDM } from './MinusDM';\nimport { PDM } from './PlusDM';\nimport { TrueRange } from './TrueRange';\nimport { WEMA } from '../moving_averages/WEMA';\nexport class ADXInput extends IndicatorInput {\n}\n;\nexport class ADXOutput extends IndicatorInput {\n}\n;\nexport class ADX extends Indicator {\n    constructor(input) {\n        super(input);\n        var lows = input.low;\n        var highs = input.high;\n        var closes = input.close;\n        var period = input.period;\n        var format = this.format;\n        var plusDM = new PDM({\n            high: [],\n            low: []\n        });\n        var minusDM = new MDM({\n            high: [],\n            low: []\n        });\n        var emaPDM = new WilderSmoothing({ period: period, values: [], format: (v) => { return v; } });\n        var emaMDM = new WilderSmoothing({ period: period, values: [], format: (v) => { return v; } });\n        var emaTR = new WilderSmoothing({ period: period, values: [], format: (v) => { return v; } });\n        var emaDX = new WEMA({ period: period, values: [], format: (v) => { return v; } });\n        var tr = new TrueRange({\n            low: [],\n            high: [],\n            close: [],\n        });\n        if (!((lows.length === highs.length) && (highs.length === closes.length))) {\n            throw ('Inputs(low,high, close) not of equal size');\n        }\n        this.result = [];\n        ADXOutput;\n        this.generator = (function* () {\n            var tick = yield;\n            var index = 0;\n            var lastATR, lastAPDM, lastAMDM, lastPDI, lastMDI, lastDX, smoothedDX;\n            lastATR = 0;\n            lastAPDM = 0;\n            lastAMDM = 0;\n            while (true) {\n                let calcTr = tr.nextValue(tick);\n                let calcPDM = plusDM.nextValue(tick);\n                let calcMDM = minusDM.nextValue(tick);\n                if (calcTr === undefined) {\n                    tick = yield;\n                    continue;\n                }\n                let lastATR = emaTR.nextValue(calcTr);\n                let lastAPDM = emaPDM.nextValue(calcPDM);\n                let lastAMDM = emaMDM.nextValue(calcMDM);\n                if ((lastATR != undefined) && (lastAPDM != undefined) && (lastAMDM != undefined)) {\n                    lastPDI = (lastAPDM) * 100 / lastATR;\n                    lastMDI = (lastAMDM) * 100 / lastATR;\n                    let diDiff = Math.abs(lastPDI - lastMDI);\n                    let diSum = (lastPDI + lastMDI);\n                    lastDX = (diDiff / diSum) * 100;\n                    smoothedDX = emaDX.nextValue(lastDX);\n                    // console.log(tick.high.toFixed(2), tick.low.toFixed(2), tick.close.toFixed(2) , calcTr.toFixed(2), calcPDM.toFixed(2), calcMDM.toFixed(2), lastATR.toFixed(2), lastAPDM.toFixed(2), lastAMDM.toFixed(2), lastPDI.toFixed(2), lastMDI.toFixed(2), diDiff.toFixed(2), diSum.toFixed(2), lastDX.toFixed(2));\n                }\n                tick = yield { adx: smoothedDX, pdi: lastPDI, mdi: lastMDI };\n            }\n        })();\n        this.generator.next();\n        lows.forEach((tick, index) => {\n            var result = this.generator.next({\n                high: highs[index],\n                low: lows[index],\n                close: closes[index]\n            });\n            if (result.value != undefined && result.value.adx != undefined) {\n                this.result.push({ adx: format(result.value.adx), pdi: format(result.value.pdi), mdi: format(result.value.mdi) });\n            }\n        });\n    }\n    ;\n    ;\n    nextValue(price) {\n        let result = this.generator.next(price).value;\n        if (result != undefined && result.adx != undefined) {\n            return { adx: this.format(result.adx), pdi: this.format(result.pdi), mdi: this.format(result.mdi) };\n        }\n    }\n    ;\n}\nADX.calculate = adx;\nexport function adx(input) {\n    Indicator.reverseInputs(input);\n    var result = new ADX(input).result;\n    if (input.reversedInput) {\n        result.reverse();\n    }\n    Indicator.reverseInputs(input);\n    return result;\n}\n;\n"]},"metadata":{},"sourceType":"module"}