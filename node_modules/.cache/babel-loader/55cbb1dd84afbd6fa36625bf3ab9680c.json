{"ast":null,"code":"//STEP 1. Import Necessary indicator or rather last step\nimport { Indicator, IndicatorInput } from '../indicator/indicator';\nimport { LinkedList } from '../Utils/LinkedList'; //STEP 2. Create the input for the indicator, mandatory should be in the constructor\n\nexport class MAInput extends IndicatorInput {\n  constructor(period, values) {\n    super();\n    this.period = period;\n    this.values = values;\n  }\n\n} //STEP3. Add class based syntax with export\n\nexport class SMA extends Indicator {\n  constructor(input) {\n    super(input);\n    this.period = input.period;\n    this.price = input.values;\n\n    var genFn = function* (period) {\n      var list = new LinkedList();\n      var sum = 0;\n      var counter = 1;\n      var current = yield;\n      var result;\n      list.push(0);\n\n      while (true) {\n        if (counter < period) {\n          counter++;\n          list.push(current);\n          sum = sum + current;\n        } else {\n          sum = sum - list.shift() + current;\n          result = sum / period;\n          list.push(current);\n        }\n\n        current = yield result;\n      }\n    };\n\n    this.generator = genFn(this.period);\n    this.generator.next();\n    this.result = [];\n    this.price.forEach(tick => {\n      var result = this.generator.next(tick);\n\n      if (result.value !== undefined) {\n        this.result.push(this.format(result.value));\n      }\n    });\n  }\n\n  nextValue(price) {\n    var result = this.generator.next(price).value;\n    if (result != undefined) return this.format(result);\n  }\n\n}\nSMA.calculate = sma;\nexport function sma(input) {\n  Indicator.reverseInputs(input);\n  var result = new SMA(input).result;\n\n  if (input.reversedInput) {\n    result.reverse();\n  }\n\n  Indicator.reverseInputs(input);\n  return result;\n}\n; //STEP 6. Run the tests","map":{"version":3,"sources":["/home/andre/ffff/node_modules/technicalindicators/lib/moving_averages/SMA.js"],"names":["Indicator","IndicatorInput","LinkedList","MAInput","constructor","period","values","SMA","input","price","genFn","list","sum","counter","current","result","push","shift","generator","next","forEach","tick","value","undefined","format","nextValue","calculate","sma","reverseInputs","reversedInput","reverse"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,wBAA1C;AACA,SAASC,UAAT,QAA2B,qBAA3B,C,CACA;;AACA,OAAO,MAAMC,OAAN,SAAsBF,cAAtB,CAAqC;AACxCG,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;AACxB;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AALuC,C,CAO5C;;AACA,OAAO,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAC/BI,EAAAA,WAAW,CAACI,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKH,MAAL,GAAcG,KAAK,CAACH,MAApB;AACA,SAAKI,KAAL,GAAaD,KAAK,CAACF,MAAnB;;AACA,QAAII,KAAK,GAAI,WAAWL,MAAX,EAAmB;AAC5B,UAAIM,IAAI,GAAG,IAAIT,UAAJ,EAAX;AACA,UAAIU,GAAG,GAAG,CAAV;AACA,UAAIC,OAAO,GAAG,CAAd;AACA,UAAIC,OAAO,GAAG,KAAd;AACA,UAAIC,MAAJ;AACAJ,MAAAA,IAAI,CAACK,IAAL,CAAU,CAAV;;AACA,aAAO,IAAP,EAAa;AACT,YAAIH,OAAO,GAAGR,MAAd,EAAsB;AAClBQ,UAAAA,OAAO;AACPF,UAAAA,IAAI,CAACK,IAAL,CAAUF,OAAV;AACAF,UAAAA,GAAG,GAAGA,GAAG,GAAGE,OAAZ;AACH,SAJD,MAKK;AACDF,UAAAA,GAAG,GAAGA,GAAG,GAAGD,IAAI,CAACM,KAAL,EAAN,GAAqBH,OAA3B;AACAC,UAAAA,MAAM,GAAKH,GAAD,GAAQP,MAAlB;AACAM,UAAAA,IAAI,CAACK,IAAL,CAAUF,OAAV;AACH;;AACDA,QAAAA,OAAO,GAAG,MAAMC,MAAhB;AACH;AACJ,KApBD;;AAqBA,SAAKG,SAAL,GAAiBR,KAAK,CAAC,KAAKL,MAAN,CAAtB;AACA,SAAKa,SAAL,CAAeC,IAAf;AACA,SAAKJ,MAAL,GAAc,EAAd;AACA,SAAKN,KAAL,CAAWW,OAAX,CAAoBC,IAAD,IAAU;AACzB,UAAIN,MAAM,GAAG,KAAKG,SAAL,CAAeC,IAAf,CAAoBE,IAApB,CAAb;;AACA,UAAIN,MAAM,CAACO,KAAP,KAAiBC,SAArB,EAAgC;AAC5B,aAAKR,MAAL,CAAYC,IAAZ,CAAiB,KAAKQ,MAAL,CAAYT,MAAM,CAACO,KAAnB,CAAjB;AACH;AACJ,KALD;AAMH;;AACDG,EAAAA,SAAS,CAAChB,KAAD,EAAQ;AACb,QAAIM,MAAM,GAAG,KAAKG,SAAL,CAAeC,IAAf,CAAoBV,KAApB,EAA2Ba,KAAxC;AACA,QAAIP,MAAM,IAAIQ,SAAd,EACI,OAAO,KAAKC,MAAL,CAAYT,MAAZ,CAAP;AACP;;AAxC8B;AA2CnCR,GAAG,CAACmB,SAAJ,GAAgBC,GAAhB;AACA,OAAO,SAASA,GAAT,CAAanB,KAAb,EAAoB;AACvBR,EAAAA,SAAS,CAAC4B,aAAV,CAAwBpB,KAAxB;AACA,MAAIO,MAAM,GAAG,IAAIR,GAAJ,CAAQC,KAAR,EAAeO,MAA5B;;AACA,MAAIP,KAAK,CAACqB,aAAV,EAAyB;AACrBd,IAAAA,MAAM,CAACe,OAAP;AACH;;AACD9B,EAAAA,SAAS,CAAC4B,aAAV,CAAwBpB,KAAxB;AACA,SAAOO,MAAP;AACH;AACD,C,CACA","sourcesContent":["//STEP 1. Import Necessary indicator or rather last step\nimport { Indicator, IndicatorInput } from '../indicator/indicator';\nimport { LinkedList } from '../Utils/LinkedList';\n//STEP 2. Create the input for the indicator, mandatory should be in the constructor\nexport class MAInput extends IndicatorInput {\n    constructor(period, values) {\n        super();\n        this.period = period;\n        this.values = values;\n    }\n}\n//STEP3. Add class based syntax with export\nexport class SMA extends Indicator {\n    constructor(input) {\n        super(input);\n        this.period = input.period;\n        this.price = input.values;\n        var genFn = (function* (period) {\n            var list = new LinkedList();\n            var sum = 0;\n            var counter = 1;\n            var current = yield;\n            var result;\n            list.push(0);\n            while (true) {\n                if (counter < period) {\n                    counter++;\n                    list.push(current);\n                    sum = sum + current;\n                }\n                else {\n                    sum = sum - list.shift() + current;\n                    result = ((sum) / period);\n                    list.push(current);\n                }\n                current = yield result;\n            }\n        });\n        this.generator = genFn(this.period);\n        this.generator.next();\n        this.result = [];\n        this.price.forEach((tick) => {\n            var result = this.generator.next(tick);\n            if (result.value !== undefined) {\n                this.result.push(this.format(result.value));\n            }\n        });\n    }\n    nextValue(price) {\n        var result = this.generator.next(price).value;\n        if (result != undefined)\n            return this.format(result);\n    }\n    ;\n}\nSMA.calculate = sma;\nexport function sma(input) {\n    Indicator.reverseInputs(input);\n    var result = new SMA(input).result;\n    if (input.reversedInput) {\n        result.reverse();\n    }\n    Indicator.reverseInputs(input);\n    return result;\n}\n;\n//STEP 6. Run the tests\n"]},"metadata":{},"sourceType":"module"}