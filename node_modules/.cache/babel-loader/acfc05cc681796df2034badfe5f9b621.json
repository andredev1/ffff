{"ast":null,"code":"\"use strict\";\n\nimport { Indicator, IndicatorInput } from '../indicator/indicator';\nimport { SMA } from '../moving_averages/SMA';\nimport { SD } from '../Utils/SD';\nexport class BollingerBandsInput extends IndicatorInput {}\n;\nexport class BollingerBandsOutput extends IndicatorInput {}\n;\nexport class BollingerBands extends Indicator {\n  constructor(input) {\n    super(input);\n    var period = input.period;\n    var priceArray = input.values;\n    var stdDev = input.stdDev;\n    var format = this.format;\n    var sma, sd;\n    this.result = [];\n    sma = new SMA({\n      period: period,\n      values: [],\n      format: v => {\n        return v;\n      }\n    });\n    sd = new SD({\n      period: period,\n      values: [],\n      format: v => {\n        return v;\n      }\n    });\n\n    this.generator = function* () {\n      var result;\n      var tick;\n      var calcSMA;\n      var calcsd;\n      tick = yield;\n\n      while (true) {\n        calcSMA = sma.nextValue(tick);\n        calcsd = sd.nextValue(tick);\n\n        if (calcSMA) {\n          let middle = format(calcSMA);\n          let upper = format(calcSMA + calcsd * stdDev);\n          let lower = format(calcSMA - calcsd * stdDev);\n          let pb = format((tick - lower) / (upper - lower));\n          result = {\n            middle: middle,\n            upper: upper,\n            lower: lower,\n            pb: pb\n          };\n        }\n\n        tick = yield result;\n      }\n    }();\n\n    this.generator.next();\n    priceArray.forEach(tick => {\n      var result = this.generator.next(tick);\n\n      if (result.value != undefined) {\n        this.result.push(result.value);\n      }\n    });\n  }\n\n  nextValue(price) {\n    return this.generator.next(price).value;\n  }\n\n}\nBollingerBands.calculate = bollingerbands;\nexport function bollingerbands(input) {\n  Indicator.reverseInputs(input);\n  var result = new BollingerBands(input).result;\n\n  if (input.reversedInput) {\n    result.reverse();\n  }\n\n  Indicator.reverseInputs(input);\n  return result;\n}\n;","map":{"version":3,"sources":["/home/andre/ffff/node_modules/technicalindicators/lib/volatility/BollingerBands.js"],"names":["Indicator","IndicatorInput","SMA","SD","BollingerBandsInput","BollingerBandsOutput","BollingerBands","constructor","input","period","priceArray","values","stdDev","format","sma","sd","result","v","generator","tick","calcSMA","calcsd","nextValue","middle","upper","lower","pb","next","forEach","value","undefined","push","price","calculate","bollingerbands","reverseInputs","reversedInput","reverse"],"mappings":"AAAA;;AACA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,wBAA1C;AACA,SAASC,GAAT,QAAoB,wBAApB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA,OAAO,MAAMC,mBAAN,SAAkCH,cAAlC,CAAiD;AAExD;AACA,OAAO,MAAMI,oBAAN,SAAmCJ,cAAnC,CAAkD;AAEzD;AACA,OAAO,MAAMK,cAAN,SAA6BN,SAA7B,CAAuC;AAC1CO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,QAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;AACA,QAAIC,UAAU,GAAGF,KAAK,CAACG,MAAvB;AACA,QAAIC,MAAM,GAAGJ,KAAK,CAACI,MAAnB;AACA,QAAIC,MAAM,GAAG,KAAKA,MAAlB;AACA,QAAIC,GAAJ,EAASC,EAAT;AACA,SAAKC,MAAL,GAAc,EAAd;AACAF,IAAAA,GAAG,GAAG,IAAIZ,GAAJ,CAAQ;AAAEO,MAAAA,MAAM,EAAEA,MAAV;AAAkBE,MAAAA,MAAM,EAAE,EAA1B;AAA8BE,MAAAA,MAAM,EAAGI,CAAD,IAAO;AAAE,eAAOA,CAAP;AAAW;AAA1D,KAAR,CAAN;AACAF,IAAAA,EAAE,GAAG,IAAIZ,EAAJ,CAAO;AAAEM,MAAAA,MAAM,EAAEA,MAAV;AAAkBE,MAAAA,MAAM,EAAE,EAA1B;AAA8BE,MAAAA,MAAM,EAAGI,CAAD,IAAO;AAAE,eAAOA,CAAP;AAAW;AAA1D,KAAP,CAAL;;AACA,SAAKC,SAAL,GAAkB,aAAa;AAC3B,UAAIF,MAAJ;AACA,UAAIG,IAAJ;AACA,UAAIC,OAAJ;AACA,UAAIC,MAAJ;AACAF,MAAAA,IAAI,GAAG,KAAP;;AACA,aAAO,IAAP,EAAa;AACTC,QAAAA,OAAO,GAAGN,GAAG,CAACQ,SAAJ,CAAcH,IAAd,CAAV;AACAE,QAAAA,MAAM,GAAGN,EAAE,CAACO,SAAH,CAAaH,IAAb,CAAT;;AACA,YAAIC,OAAJ,EAAa;AACT,cAAIG,MAAM,GAAGV,MAAM,CAACO,OAAD,CAAnB;AACA,cAAII,KAAK,GAAGX,MAAM,CAACO,OAAO,GAAIC,MAAM,GAAGT,MAArB,CAAlB;AACA,cAAIa,KAAK,GAAGZ,MAAM,CAACO,OAAO,GAAIC,MAAM,GAAGT,MAArB,CAAlB;AACA,cAAIc,EAAE,GAAGb,MAAM,CAAC,CAACM,IAAI,GAAGM,KAAR,KAAkBD,KAAK,GAAGC,KAA1B,CAAD,CAAf;AACAT,UAAAA,MAAM,GAAG;AACLO,YAAAA,MAAM,EAAEA,MADH;AAELC,YAAAA,KAAK,EAAEA,KAFF;AAGLC,YAAAA,KAAK,EAAEA,KAHF;AAILC,YAAAA,EAAE,EAAEA;AAJC,WAAT;AAMH;;AACDP,QAAAA,IAAI,GAAG,MAAMH,MAAb;AACH;AACJ,KAvBgB,EAAjB;;AAwBA,SAAKE,SAAL,CAAeS,IAAf;AACAjB,IAAAA,UAAU,CAACkB,OAAX,CAAoBT,IAAD,IAAU;AACzB,UAAIH,MAAM,GAAG,KAAKE,SAAL,CAAeS,IAAf,CAAoBR,IAApB,CAAb;;AACA,UAAIH,MAAM,CAACa,KAAP,IAAgBC,SAApB,EAA+B;AAC3B,aAAKd,MAAL,CAAYe,IAAZ,CAAiBf,MAAM,CAACa,KAAxB;AACH;AACJ,KALD;AAMH;;AACDP,EAAAA,SAAS,CAACU,KAAD,EAAQ;AACb,WAAO,KAAKd,SAAL,CAAeS,IAAf,CAAoBK,KAApB,EAA2BH,KAAlC;AACH;;AA7CyC;AAgD9CvB,cAAc,CAAC2B,SAAf,GAA2BC,cAA3B;AACA,OAAO,SAASA,cAAT,CAAwB1B,KAAxB,EAA+B;AAClCR,EAAAA,SAAS,CAACmC,aAAV,CAAwB3B,KAAxB;AACA,MAAIQ,MAAM,GAAG,IAAIV,cAAJ,CAAmBE,KAAnB,EAA0BQ,MAAvC;;AACA,MAAIR,KAAK,CAAC4B,aAAV,EAAyB;AACrBpB,IAAAA,MAAM,CAACqB,OAAP;AACH;;AACDrC,EAAAA,SAAS,CAACmC,aAAV,CAAwB3B,KAAxB;AACA,SAAOQ,MAAP;AACH;AACD","sourcesContent":["\"use strict\";\nimport { Indicator, IndicatorInput } from '../indicator/indicator';\nimport { SMA } from '../moving_averages/SMA';\nimport { SD } from '../Utils/SD';\nexport class BollingerBandsInput extends IndicatorInput {\n}\n;\nexport class BollingerBandsOutput extends IndicatorInput {\n}\n;\nexport class BollingerBands extends Indicator {\n    constructor(input) {\n        super(input);\n        var period = input.period;\n        var priceArray = input.values;\n        var stdDev = input.stdDev;\n        var format = this.format;\n        var sma, sd;\n        this.result = [];\n        sma = new SMA({ period: period, values: [], format: (v) => { return v; } });\n        sd = new SD({ period: period, values: [], format: (v) => { return v; } });\n        this.generator = (function* () {\n            var result;\n            var tick;\n            var calcSMA;\n            var calcsd;\n            tick = yield;\n            while (true) {\n                calcSMA = sma.nextValue(tick);\n                calcsd = sd.nextValue(tick);\n                if (calcSMA) {\n                    let middle = format(calcSMA);\n                    let upper = format(calcSMA + (calcsd * stdDev));\n                    let lower = format(calcSMA - (calcsd * stdDev));\n                    let pb = format((tick - lower) / (upper - lower));\n                    result = {\n                        middle: middle,\n                        upper: upper,\n                        lower: lower,\n                        pb: pb\n                    };\n                }\n                tick = yield result;\n            }\n        })();\n        this.generator.next();\n        priceArray.forEach((tick) => {\n            var result = this.generator.next(tick);\n            if (result.value != undefined) {\n                this.result.push(result.value);\n            }\n        });\n    }\n    nextValue(price) {\n        return this.generator.next(price).value;\n    }\n    ;\n}\nBollingerBands.calculate = bollingerbands;\nexport function bollingerbands(input) {\n    Indicator.reverseInputs(input);\n    var result = new BollingerBands(input).result;\n    if (input.reversedInput) {\n        result.reverse();\n    }\n    Indicator.reverseInputs(input);\n    return result;\n}\n;\n"]},"metadata":{},"sourceType":"module"}