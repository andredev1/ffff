{"ast":null,"code":"import { IndicatorInput, Indicator } from '../indicator/indicator';\n/**\n * Created by AAravindan on 5/10/16.\n */\n\n\"use strict\";\n\nimport LinkedList from '../Utils/FixedSizeLinkedList';\nimport { SMA } from '../moving_averages/SMA';\nexport class StochasticInput extends IndicatorInput {}\n;\nexport class StochasticOutput {}\n;\nexport class Stochastic extends Indicator {\n  constructor(input) {\n    super(input);\n    let lows = input.low;\n    let highs = input.high;\n    let closes = input.close;\n    let period = input.period;\n    let signalPeriod = input.signalPeriod;\n    let format = this.format;\n\n    if (!(lows.length === highs.length && highs.length === closes.length)) {\n      throw 'Inputs(low,high, close) not of equal size';\n    }\n\n    this.result = []; //%K = (Current Close - Lowest Low)/(Highest High - Lowest Low) * 100\n    //%D = 3-day SMA of %K\n    //\n    //Lowest Low = lowest low for the look-back period\n    //Highest High = highest high for the look-back period\n    //%K is multiplied by 100 to move the decimal point two places\n\n    this.generator = function* () {\n      let index = 1;\n      let pastHighPeriods = new LinkedList(period, true, false);\n      let pastLowPeriods = new LinkedList(period, false, true);\n      let dSma = new SMA({\n        period: signalPeriod,\n        values: [],\n        format: v => {\n          return v;\n        }\n      });\n      let k, d;\n      var tick = yield;\n\n      while (true) {\n        pastHighPeriods.push(tick.high);\n        pastLowPeriods.push(tick.low);\n\n        if (index < period) {\n          index++;\n          tick = yield;\n          continue;\n        }\n\n        let periodLow = pastLowPeriods.periodLow;\n        k = (tick.close - periodLow) / (pastHighPeriods.periodHigh - periodLow) * 100;\n        k = isNaN(k) ? 0 : k; //This happens when the close, high and low are same for the entire period; Bug fix for \n\n        d = dSma.nextValue(k);\n        tick = yield {\n          k: format(k),\n          d: d !== undefined ? format(d) : undefined\n        };\n      }\n    }();\n\n    this.generator.next();\n    lows.forEach((tick, index) => {\n      var result = this.generator.next({\n        high: highs[index],\n        low: lows[index],\n        close: closes[index]\n      });\n\n      if (result.value !== undefined) {\n        this.result.push(result.value);\n      }\n    });\n  }\n\n  nextValue(input) {\n    let nextResult = this.generator.next(input);\n    if (nextResult.value !== undefined) return nextResult.value;\n  }\n\n}\nStochastic.calculate = stochastic;\nexport function stochastic(input) {\n  Indicator.reverseInputs(input);\n  var result = new Stochastic(input).result;\n\n  if (input.reversedInput) {\n    result.reverse();\n  }\n\n  Indicator.reverseInputs(input);\n  return result;\n}\n;","map":{"version":3,"sources":["/home/andre/Documents/ffff/node_modules/technicalindicators/lib/momentum/Stochastic.js"],"names":["IndicatorInput","Indicator","LinkedList","SMA","StochasticInput","StochasticOutput","Stochastic","constructor","input","lows","low","highs","high","closes","close","period","signalPeriod","format","length","result","generator","index","pastHighPeriods","pastLowPeriods","dSma","values","v","k","d","tick","push","periodLow","periodHigh","isNaN","nextValue","undefined","next","forEach","value","nextResult","calculate","stochastic","reverseInputs","reversedInput","reverse"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,SAAzB,QAA0C,wBAA1C;AACA;AACA;AACA;;AACA;;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,GAAT,QAAoB,wBAApB;AACA,OAAO,MAAMC,eAAN,SAA8BJ,cAA9B,CAA6C;AAEpD;AACA,OAAO,MAAMK,gBAAN,CAAuB;AAE9B;AACA,OAAO,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AACtCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,QAAIC,IAAI,GAAGD,KAAK,CAACE,GAAjB;AACA,QAAIC,KAAK,GAAGH,KAAK,CAACI,IAAlB;AACA,QAAIC,MAAM,GAAGL,KAAK,CAACM,KAAnB;AACA,QAAIC,MAAM,GAAGP,KAAK,CAACO,MAAnB;AACA,QAAIC,YAAY,GAAGR,KAAK,CAACQ,YAAzB;AACA,QAAIC,MAAM,GAAG,KAAKA,MAAlB;;AACA,QAAI,EAAGR,IAAI,CAACS,MAAL,KAAgBP,KAAK,CAACO,MAAvB,IAAmCP,KAAK,CAACO,MAAN,KAAiBL,MAAM,CAACK,MAA7D,CAAJ,EAA2E;AACvE,YAAO,2CAAP;AACH;;AACD,SAAKC,MAAL,GAAc,EAAd,CAXe,CAYf;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKC,SAAL,GAAkB,aAAa;AAC3B,UAAIC,KAAK,GAAG,CAAZ;AACA,UAAIC,eAAe,GAAG,IAAIpB,UAAJ,CAAea,MAAf,EAAuB,IAAvB,EAA6B,KAA7B,CAAtB;AACA,UAAIQ,cAAc,GAAG,IAAIrB,UAAJ,CAAea,MAAf,EAAuB,KAAvB,EAA8B,IAA9B,CAArB;AACA,UAAIS,IAAI,GAAG,IAAIrB,GAAJ,CAAQ;AACfY,QAAAA,MAAM,EAAEC,YADO;AAEfS,QAAAA,MAAM,EAAE,EAFO;AAGfR,QAAAA,MAAM,EAAGS,CAAD,IAAO;AAAE,iBAAOA,CAAP;AAAW;AAHb,OAAR,CAAX;AAKA,UAAIC,CAAJ,EAAOC,CAAP;AACA,UAAIC,IAAI,GAAG,KAAX;;AACA,aAAO,IAAP,EAAa;AACTP,QAAAA,eAAe,CAACQ,IAAhB,CAAqBD,IAAI,CAACjB,IAA1B;AACAW,QAAAA,cAAc,CAACO,IAAf,CAAoBD,IAAI,CAACnB,GAAzB;;AACA,YAAIW,KAAK,GAAGN,MAAZ,EAAoB;AAChBM,UAAAA,KAAK;AACLQ,UAAAA,IAAI,GAAG,KAAP;AACA;AACH;;AACD,YAAIE,SAAS,GAAGR,cAAc,CAACQ,SAA/B;AACAJ,QAAAA,CAAC,GAAG,CAACE,IAAI,CAACf,KAAL,GAAaiB,SAAd,KAA4BT,eAAe,CAACU,UAAhB,GAA6BD,SAAzD,IAAsE,GAA1E;AACAJ,QAAAA,CAAC,GAAGM,KAAK,CAACN,CAAD,CAAL,GAAW,CAAX,GAAeA,CAAnB,CAVS,CAUa;;AACtBC,QAAAA,CAAC,GAAGJ,IAAI,CAACU,SAAL,CAAeP,CAAf,CAAJ;AACAE,QAAAA,IAAI,GAAG,MAAM;AACTF,UAAAA,CAAC,EAAEV,MAAM,CAACU,CAAD,CADA;AAETC,UAAAA,CAAC,EAAGA,CAAC,KAAKO,SAAP,GAAoBlB,MAAM,CAACW,CAAD,CAA1B,GAAgCO;AAF1B,SAAb;AAIH;AACJ,KA5BgB,EAAjB;;AA6BA,SAAKf,SAAL,CAAegB,IAAf;AACA3B,IAAAA,IAAI,CAAC4B,OAAL,CAAa,CAACR,IAAD,EAAOR,KAAP,KAAiB;AAC1B,UAAIF,MAAM,GAAG,KAAKC,SAAL,CAAegB,IAAf,CAAoB;AAC7BxB,QAAAA,IAAI,EAAED,KAAK,CAACU,KAAD,CADkB;AAE7BX,QAAAA,GAAG,EAAED,IAAI,CAACY,KAAD,CAFoB;AAG7BP,QAAAA,KAAK,EAAED,MAAM,CAACQ,KAAD;AAHgB,OAApB,CAAb;;AAKA,UAAIF,MAAM,CAACmB,KAAP,KAAiBH,SAArB,EAAgC;AAC5B,aAAKhB,MAAL,CAAYW,IAAZ,CAAiBX,MAAM,CAACmB,KAAxB;AACH;AACJ,KATD;AAUH;;AAEDJ,EAAAA,SAAS,CAAC1B,KAAD,EAAQ;AACb,QAAI+B,UAAU,GAAG,KAAKnB,SAAL,CAAegB,IAAf,CAAoB5B,KAApB,CAAjB;AACA,QAAI+B,UAAU,CAACD,KAAX,KAAqBH,SAAzB,EACI,OAAOI,UAAU,CAACD,KAAlB;AACP;;AAjEqC;AAoE1ChC,UAAU,CAACkC,SAAX,GAAuBC,UAAvB;AACA,OAAO,SAASA,UAAT,CAAoBjC,KAApB,EAA2B;AAC9BP,EAAAA,SAAS,CAACyC,aAAV,CAAwBlC,KAAxB;AACA,MAAIW,MAAM,GAAG,IAAIb,UAAJ,CAAeE,KAAf,EAAsBW,MAAnC;;AACA,MAAIX,KAAK,CAACmC,aAAV,EAAyB;AACrBxB,IAAAA,MAAM,CAACyB,OAAP;AACH;;AACD3C,EAAAA,SAAS,CAACyC,aAAV,CAAwBlC,KAAxB;AACA,SAAOW,MAAP;AACH;AACD","sourcesContent":["import { IndicatorInput, Indicator } from '../indicator/indicator';\n/**\n * Created by AAravindan on 5/10/16.\n */\n\"use strict\";\nimport LinkedList from '../Utils/FixedSizeLinkedList';\nimport { SMA } from '../moving_averages/SMA';\nexport class StochasticInput extends IndicatorInput {\n}\n;\nexport class StochasticOutput {\n}\n;\nexport class Stochastic extends Indicator {\n    constructor(input) {\n        super(input);\n        let lows = input.low;\n        let highs = input.high;\n        let closes = input.close;\n        let period = input.period;\n        let signalPeriod = input.signalPeriod;\n        let format = this.format;\n        if (!((lows.length === highs.length) && (highs.length === closes.length))) {\n            throw ('Inputs(low,high, close) not of equal size');\n        }\n        this.result = [];\n        //%K = (Current Close - Lowest Low)/(Highest High - Lowest Low) * 100\n        //%D = 3-day SMA of %K\n        //\n        //Lowest Low = lowest low for the look-back period\n        //Highest High = highest high for the look-back period\n        //%K is multiplied by 100 to move the decimal point two places\n        this.generator = (function* () {\n            let index = 1;\n            let pastHighPeriods = new LinkedList(period, true, false);\n            let pastLowPeriods = new LinkedList(period, false, true);\n            let dSma = new SMA({\n                period: signalPeriod,\n                values: [],\n                format: (v) => { return v; }\n            });\n            let k, d;\n            var tick = yield;\n            while (true) {\n                pastHighPeriods.push(tick.high);\n                pastLowPeriods.push(tick.low);\n                if (index < period) {\n                    index++;\n                    tick = yield;\n                    continue;\n                }\n                let periodLow = pastLowPeriods.periodLow;\n                k = (tick.close - periodLow) / (pastHighPeriods.periodHigh - periodLow) * 100;\n                k = isNaN(k) ? 0 : k; //This happens when the close, high and low are same for the entire period; Bug fix for \n                d = dSma.nextValue(k);\n                tick = yield {\n                    k: format(k),\n                    d: (d !== undefined) ? format(d) : undefined\n                };\n            }\n        })();\n        this.generator.next();\n        lows.forEach((tick, index) => {\n            var result = this.generator.next({\n                high: highs[index],\n                low: lows[index],\n                close: closes[index]\n            });\n            if (result.value !== undefined) {\n                this.result.push(result.value);\n            }\n        });\n    }\n    ;\n    nextValue(input) {\n        let nextResult = this.generator.next(input);\n        if (nextResult.value !== undefined)\n            return nextResult.value;\n    }\n    ;\n}\nStochastic.calculate = stochastic;\nexport function stochastic(input) {\n    Indicator.reverseInputs(input);\n    var result = new Stochastic(input).result;\n    if (input.reversedInput) {\n        result.reverse();\n    }\n    Indicator.reverseInputs(input);\n    return result;\n}\n;\n"]},"metadata":{},"sourceType":"module"}