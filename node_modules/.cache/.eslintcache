[{"/home/andre/Documents/f/f/src/index.js":"1","/home/andre/Documents/f/f/src/App.js":"2","/home/andre/Documents/f/f/src/utils.js":"3","/home/andre/Documents/f/f/src/components/Dashboard.js":"4"},{"size":197,"mtime":1612982360000,"results":"5","hashOfConfig":"6"},{"size":3254,"mtime":1625049127070,"results":"7","hashOfConfig":"6"},{"size":799,"mtime":1625082426432,"results":"8","hashOfConfig":"6"},{"size":555,"mtime":1612982360000,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1sm1zzh",{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"12"},"/home/andre/Documents/f/f/src/index.js",[],["21","22"],"/home/andre/Documents/f/f/src/App.js",["23","24"],"import React, { useState, useEffect, useRef } from \"react\";\nimport Dashboard from \"./components/Dashboard\";\nimport { formatData } from \"./utils\";\nimport \"./styles.css\";\nimport { CSVLink, CSVDownload } from \"react-csv\";\n\n\nexport default function App() {\n  const [currencies, setcurrencies] = useState([]);\n  const [pair, setpair] = useState(\"\");\n  const [price, setprice] = useState(\"0.00\");\n  const [pastData, setpastData] = useState({});\n  const [csvdata, setcsvdata] = useState({});\n  const ws = useRef(null);\n\n  let first = useRef(false);\n  const url = \"https://api.pro.coinbase.com\";\n\n  useEffect(() => {\n    ws.current = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n\n    let pairs = [];\n\n    const apiCall = async () => {\n      await fetch(url + \"/products\")\n        .then((res) => res.json())\n        .then((data) => (pairs = data));\n      \n      let filtered = pairs.filter((pair) => {\n        if (pair.quote_currency === \"USD\") {\n          return pair;\n        }\n      });\n\n      filtered = filtered.sort((a, b) => {\n        if (a.base_currency < b.base_currency) {\n          return -1;\n        }\n        if (a.base_currency > b.base_currency) {\n          return 1;\n        }\n        return 0;\n      });\n\n      \n      setcurrencies(filtered);\n\n      first.current = true;\n    };\n\n    apiCall();\n  }, []);\n\n  useEffect(() => {\n    if (!first.current) {\n      \n      return;\n    }\n\n    \n    let msg = {\n      type: \"subscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let jsonMsg = JSON.stringify(msg);\n    ws.current.send(jsonMsg);\n\n\n\n\n    \n    let historicalDataURL = `${url}/products/${pair}/candles?granularity=86400`;\n    const fetchHistoricalData = async () => {\n      let dataArr = [];\n      await fetch(historicalDataURL)\n        .then((res) => res.json())\n        .then((data) => (dataArr = data));\n      \n      let formattedData = formatData(dataArr);\n      setpastData(formattedData);\n      setcsvdata(dataArr)\n    };\n\nfetchHistoricalData();\n\n    ws.current.onmessage = (e) => {\n      let data = JSON.parse(e.data);\n      if (data.type !== \"ticker\") {\n        return;\n      }\n\n      if (data.product_id === pair) {\n        setprice(data.price);\n      }\n    };\n  }, [pair]);\n\n\n  //const csvData=csvdata;\n // const csvData = [\n //   [\"firstname\", \"lastname\", \"email\"],\n //   [\"Ahmed\", \"Tomi\", \"ah@smthing.co.com\"],\n //   [\"Raed\", \"Labes\", \"rl@smthing.co.com\"],\n //   [\"Yezzi\", \"Min l3b\", \"ymin@cocococo.com\"]\n // ];\n\n\n  const handleSelect = (e) => {\n    let unsubMsg = {\n      type: \"unsubscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let unsub = JSON.stringify(unsubMsg);\n\n    ws.current.send(unsub);\n\n    setpair(e.target.value);\n  };\n  let csv=[];\n  if(Object.keys(csvdata).length>0){\n    csv.push(<CSVLink data={csvdata}>Download CSV</CSVLink>);\n  }\n  return (\n    <div className=\"container\">\n      {\n        <select name=\"currency\" value={pair} onChange={handleSelect}>\n          {currencies.map((cur, idx) => {\n            return (\n              <option key={idx} value={cur.id}>\n                {cur.display_name}\n              </option>\n            );\n          })}\n        </select>\n      }\n      {csv}\n      <Dashboard price={price} data={pastData} />\n\n\n    </div>\n  );\n}\n","/home/andre/Documents/f/f/src/utils.js",[],"/home/andre/Documents/f/f/src/components/Dashboard.js",["25"],"import React, { useRef } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nfunction Dashboard({ price, data }) {\n  const opts = {\n    tooltips: {\n      intersect: false,\n      mode: \"index\"\n    },\n    responsive: true,\n    maintainAspectRatio: false\n  };\n  if (price === \"0.00\") {\n    return <h2>please select a currency pair</h2>;\n  }\n  return (\n    <div className=\"dashboard\">\n      <h2>{`$${price}`}</h2>\n\n      <div className=\"chart-container\">\n        <Line data={data} options={opts} />\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":5,"column":19,"nodeType":"32","messageId":"33","endLine":5,"endColumn":30},{"ruleId":"34","severity":1,"message":"35","line":29,"column":42,"nodeType":"36","messageId":"37","endLine":29,"endColumn":44},{"ruleId":"30","severity":1,"message":"38","line":1,"column":17,"nodeType":"32","messageId":"33","endLine":1,"endColumn":23},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'CSVDownload' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useRef' is defined but never used.","no-global-assign","no-unsafe-negation"]